{
  "$schema": "./schema.json",
  "AbortController": {
    "name": "AbortController",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": []
        }
      },
      {
        "name": "signal",
        "type": {
          "name": "AbortSignal"
        },
        "readonly": true
      },
      {
        "name": "abort",
        "type": {
          "params": [],
          "returns": {
            "name": "void"
          }
        }
      }
    ],
    "kind": "class"
  },
  "AbortSignal": {
    "name": "AbortSignal",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": []
        }
      },
      {
        "name": "abort",
        "type": {
          "params": [],
          "returns": {
            "name": "AbortSignal"
          }
        },
        "static": true
      },
      {
        "name": "aborted",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      }
    ],
    "extends": [
      {
        "name": "EventTarget"
      }
    ],
    "kind": "class"
  },
  "BasicImageTransformations": {
    "name": "BasicImageTransformations",
    "members": [
      {
        "name": "width",
        "type": {
          "name": "number",
          "optional": true
        },
        "comment": {
          "text": "Maximum width in image pixels. The value must be an integer."
        }
      },
      {
        "name": "height",
        "type": {
          "name": "number",
          "optional": true
        },
        "comment": {
          "text": "Maximum height in image pixels. The value must be an integer."
        }
      },
      {
        "name": "fit",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "\"scale-down\""
            },
            {
              "name": "\"contain\""
            },
            {
              "name": "\"cover\""
            },
            {
              "name": "\"crop\""
            },
            {
              "name": "\"pad\""
            }
          ],
          "optional": true
        },
        "comment": {
          "text": "Resizing mode as a string. It affects interpretation of width and height\noptions:\n - scale-down: Similar to contain, but the image is never enlarged. If\n   the image is larger than given width or height, it will be resized.\n   Otherwise its original size will be kept.\n - contain: Resizes to maximum size that fits within the given width and\n   height. If only a single dimension is given (e.g. only width), the\n   image will be shrunk or enlarged to exactly match that dimension.\n   Aspect ratio is always preserved.\n - cover: Resizes (shrinks or enlarges) to fill the entire area of width\n   and height. If the image has an aspect ratio different from the ratio\n   of width and height, it will be cropped to fit.\n - crop: The image will shrunk and cropped to fit within the area\n   specified by width and height. The image won\u2019t be enlarged. For images\n   smaller than the given dimensions it\u2019s the same as scale-down. For\n   images larger than the given dimensions, it\u2019s the same as cover.\n - pad: Resizes to the maximum size that fits within the given width and\n   height, and then fills the remaining area with a background color\n   (white by default). Use of this mode is not recommended, as the same\n   effect can be more efficiently achieved with the contain mode and the\n   CSS object-fit: contain property."
        }
      },
      {
        "name": "gravity",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "\"left\""
            },
            {
              "name": "\"right\""
            },
            {
              "name": "\"top\""
            },
            {
              "name": "\"bottom\""
            },
            {
              "name": "\"center\""
            },
            {
              "name": "\"auto\""
            },
            {
              "name": "BasicImageTransformationsGravityCoordinates"
            }
          ],
          "optional": true
        },
        "comment": {
          "text": "When cropping with fit: \"cover\", this defines the side or point that should\nbe left uncropped. The value is either a string\n\"left\", \"right\", \"top\", \"bottom\", \"auto\", or \"center\" (the default),\nor an object {x, y} containing focal point coordinates in the original\nimage expressed as fractions ranging from 0.0 (top or left) to 1.0\n(bottom or right), 0.5 being the center. {fit: \"cover\", gravity: \"top\"} will\ncrop bottom or left and right sides as necessary, but won\u2019t crop anything\nfrom the top. {fit: \"cover\", gravity: {x:0.5, y:0.2}} will crop each side to\npreserve as much as possible around a point at 20% of the height of the\nsource image."
        }
      },
      {
        "name": "background",
        "type": {
          "name": "string",
          "optional": true
        },
        "comment": {
          "text": "Background color to add underneath the image. Applies only to images with\ntransparency (such as PNG). Accepts any CSS color (#RRGGBB, rgba(\u2026),\nhsl(\u2026), etc.)"
        }
      },
      {
        "name": "rotate",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "0"
            },
            {
              "name": "90"
            },
            {
              "name": "180"
            },
            {
              "name": "270"
            },
            {
              "name": "360"
            }
          ],
          "optional": true
        },
        "comment": {
          "text": "Number of degrees (90, 180, 270) to rotate the image by. width and height\noptions refer to axes after rotation."
        }
      }
    ],
    "kind": "struct"
  },
  "BasicImageTransformationsGravityCoordinates": {
    "name": "BasicImageTransformationsGravityCoordinates",
    "members": [
      {
        "name": "x",
        "type": {
          "name": "number"
        }
      },
      {
        "name": "y",
        "type": {
          "name": "number"
        }
      }
    ],
    "kind": "struct"
  },
  "Blob": {
    "name": "Blob",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "bits",
              "type": {
                "name": "BlobBits",
                "optional": true
              }
            },
            {
              "name": "options",
              "type": {
                "name": "BlobOptions",
                "optional": true
              }
            }
          ]
        }
      },
      {
        "name": "size",
        "type": {
          "name": "integer"
        },
        "readonly": true
      },
      {
        "name": "type",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "slice",
        "type": {
          "params": [
            {
              "name": "start",
              "type": {
                "name": "integer",
                "optional": true
              }
            },
            {
              "name": "end",
              "type": {
                "name": "integer",
                "optional": true
              }
            },
            {
              "name": "type",
              "type": {
                "name": "string",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Blob"
          }
        }
      },
      {
        "name": "arrayBuffer",
        "type": {
          "params": [],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "ArrayBuffer"
              }
            ]
          }
        }
      },
      {
        "name": "text",
        "type": {
          "params": [],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "string"
              }
            ]
          }
        }
      },
      {
        "name": "stream",
        "type": {
          "params": [],
          "returns": {
            "name": "ReadableStream"
          }
        }
      }
    ],
    "kind": "class"
  },
  "BlobBits": {
    "name": "BlobBits",
    "type": {
      "name": "[]",
      "args": [
        {
          "name": "|",
          "args": [
            {
              "name": "ArrayBuffer"
            },
            {
              "name": "string"
            },
            {
              "name": "Blob"
            }
          ]
        }
      ]
    },
    "kind": "typedef"
  },
  "BlobOptions": {
    "name": "BlobOptions",
    "members": [
      {
        "name": "type",
        "type": {
          "name": "string",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "Body": {
    "name": "Body",
    "members": [
      {
        "name": "body",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "ReadableStream"
            },
            {
              "name": "null"
            }
          ]
        },
        "readonly": true
      },
      {
        "name": "bodyUsed",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "arrayBuffer",
        "type": {
          "params": [],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "ArrayBuffer"
              }
            ]
          }
        }
      },
      {
        "name": "text",
        "type": {
          "params": [],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "string"
              }
            ]
          }
        }
      },
      {
        "name": "json",
        "type": {
          "params": [],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "T"
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "T"
          }
        ]
      },
      {
        "name": "formData",
        "type": {
          "params": [],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "FormData"
              }
            ]
          }
        }
      },
      {
        "name": "blob",
        "type": {
          "params": [],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "Blob"
              }
            ]
          }
        }
      }
    ],
    "kind": "class"
  },
  "BodyInit": {
    "name": "BodyInit",
    "type": {
      "name": "|",
      "args": [
        {
          "name": "ReadableStream"
        },
        {
          "name": "string"
        },
        {
          "name": "ArrayBuffer"
        },
        {
          "name": "Blob"
        },
        {
          "name": "URLSearchParams"
        },
        {
          "name": "FormData"
        }
      ]
    },
    "kind": "typedef"
  },
  "BodyInitializer": {
    "name": "BodyInitializer",
    "type": {
      "name": "BodyInit"
    },
    "comment": {
      "text": "Back compat for code migrating to older definitions.",
      "deprecated": "Use BodyInit instead."
    },
    "kind": "typedef"
  },
  "Cache": {
    "name": "Cache",
    "members": [
      {
        "name": "delete",
        "type": {
          "params": [
            {
              "name": "request",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "Request"
                  },
                  {
                    "name": "string"
                  }
                ]
              }
            },
            {
              "name": "options",
              "type": {
                "name": "CacheQueryOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "boolean"
              }
            ]
          }
        }
      },
      {
        "name": "match",
        "type": {
          "params": [
            {
              "name": "request",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "Request"
                  },
                  {
                    "name": "string"
                  }
                ]
              }
            },
            {
              "name": "options",
              "type": {
                "name": "CacheQueryOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "Response",
                "optional": true
              }
            ]
          }
        }
      },
      {
        "name": "put",
        "type": {
          "params": [
            {
              "name": "request",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "Request"
                  },
                  {
                    "name": "string"
                  }
                ]
              }
            },
            {
              "name": "response",
              "type": {
                "name": "Response"
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        }
      }
    ],
    "kind": "class"
  },
  "CacheQueryOptions": {
    "name": "CacheQueryOptions",
    "members": [
      {
        "name": "ignoreMethod",
        "type": {
          "name": "boolean",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "CacheStorage": {
    "name": "CacheStorage",
    "members": [
      {
        "name": "open",
        "type": {
          "params": [
            {
              "name": "cacheName",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "Cache"
              }
            ]
          }
        }
      },
      {
        "name": "default",
        "type": {
          "name": "Cache"
        },
        "readonly": true
      }
    ],
    "kind": "class"
  },
  "CfRequestInit": {
    "name": "CfRequestInit",
    "members": [
      {
        "name": "cf",
        "type": {
          "name": "RequestInitCfProperties",
          "optional": true
        }
      }
    ],
    "extends": [
      {
        "name": "Omit",
        "args": [
          {
            "name": "RequestInit"
          },
          {
            "name": "\"cf\""
          }
        ]
      }
    ],
    "kind": "struct"
  },
  "CfRequestInitializerDict": {
    "name": "CfRequestInitializerDict",
    "type": {
      "name": "CfRequestInit"
    },
    "comment": {
      "text": "Back compat support with older types.",
      "deprecated": "Use CfRequestInit instead."
    },
    "kind": "typedef"
  },
  "CloseEvent": {
    "name": "CloseEvent",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "type",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "initializer",
              "type": {
                "name": "CloseEventInit"
              }
            }
          ]
        }
      },
      {
        "name": "code",
        "type": {
          "name": "integer"
        },
        "readonly": true
      },
      {
        "name": "reason",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "wasClean",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      }
    ],
    "extends": [
      {
        "name": "Event"
      }
    ],
    "kind": "class"
  },
  "CloseEventInit": {
    "name": "CloseEventInit",
    "members": [
      {
        "name": "code",
        "type": {
          "name": "integer",
          "optional": true
        }
      },
      {
        "name": "reason",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "wasClean",
        "type": {
          "name": "boolean",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "CloseEventInitializer": {
    "name": "CloseEventInitializer",
    "type": {
      "name": "CloseEventInit"
    },
    "comment": {
      "text": "Back compat for code migrating from older definitions.",
      "deprecated": "Use CloseEventInit instead."
    },
    "kind": "typedef"
  },
  "Comment": {
    "name": "Comment",
    "members": [
      {
        "name": "text",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "removed",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "before",
        "type": {
          "params": [
            {
              "name": "content",
              "type": {
                "name": "Content"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "ContentOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Comment"
          }
        }
      },
      {
        "name": "after",
        "type": {
          "params": [
            {
              "name": "content",
              "type": {
                "name": "Content"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "ContentOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Comment"
          }
        }
      },
      {
        "name": "replace",
        "type": {
          "params": [
            {
              "name": "content",
              "type": {
                "name": "Content"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "ContentOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Comment"
          }
        }
      },
      {
        "name": "remove",
        "type": {
          "params": [],
          "returns": {
            "name": "Comment"
          }
        }
      }
    ],
    "kind": "class"
  },
  "Console": {
    "name": "Console",
    "members": [
      {
        "name": "debug",
        "type": {
          "params": [
            {
              "name": "data",
              "type": {
                "name": "[]",
                "args": [
                  {
                    "name": "any"
                  }
                ],
                "variadic": true
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "error",
        "type": {
          "params": [
            {
              "name": "data",
              "type": {
                "name": "[]",
                "args": [
                  {
                    "name": "any"
                  }
                ],
                "variadic": true
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "info",
        "type": {
          "params": [
            {
              "name": "data",
              "type": {
                "name": "[]",
                "args": [
                  {
                    "name": "any"
                  }
                ],
                "variadic": true
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "log",
        "type": {
          "params": [
            {
              "name": "data",
              "type": {
                "name": "[]",
                "args": [
                  {
                    "name": "any"
                  }
                ],
                "variadic": true
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "warn",
        "type": {
          "params": [
            {
              "name": "data",
              "type": {
                "name": "[]",
                "args": [
                  {
                    "name": "any"
                  }
                ],
                "variadic": true
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      }
    ],
    "kind": "struct"
  },
  "Content": {
    "name": "Content",
    "type": {
      "name": "|",
      "args": [
        {
          "name": "string"
        },
        {
          "name": "ReadableStream"
        },
        {
          "name": "Response"
        }
      ]
    },
    "kind": "typedef"
  },
  "ContentOptions": {
    "name": "ContentOptions",
    "members": [
      {
        "name": "html",
        "type": {
          "name": "boolean",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "Crypto": {
    "name": "Crypto",
    "members": [
      {
        "name": "subtle",
        "type": {
          "name": "SubtleCrypto"
        },
        "readonly": true
      },
      {
        "name": "getRandomValues",
        "type": {
          "params": [
            {
              "name": "buffer",
              "type": {
                "name": "ArrayBufferView"
              }
            }
          ],
          "returns": {
            "name": "ArrayBufferView"
          }
        }
      },
      {
        "name": "randomUUID",
        "type": {
          "params": [],
          "returns": {
            "name": "string"
          }
        }
      }
    ],
    "kind": "class"
  },
  "CryptoKey": {
    "name": "CryptoKey",
    "members": [
      {
        "name": "type",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "extractable",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "algorithm",
        "type": {
          "name": "CryptoKeyAlgorithmVariant"
        },
        "readonly": true
      },
      {
        "name": "usages",
        "type": {
          "name": "[]",
          "args": [
            {
              "name": "string"
            }
          ]
        },
        "readonly": true
      }
    ],
    "kind": "class"
  },
  "CryptoKeyAesKeyAlgorithm": {
    "name": "CryptoKeyAesKeyAlgorithm",
    "members": [
      {
        "name": "name",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "length",
        "type": {
          "name": "integer"
        }
      }
    ],
    "kind": "struct"
  },
  "CryptoKeyAlgorithmVariant": {
    "name": "CryptoKeyAlgorithmVariant",
    "type": {
      "name": "|",
      "args": [
        {
          "name": "CryptoKeyKeyAlgorithm"
        },
        {
          "name": "CryptoKeyAesKeyAlgorithm"
        },
        {
          "name": "CryptoKeyHmacKeyAlgorithm"
        },
        {
          "name": "CryptoKeyRsaKeyAlgorithm"
        },
        {
          "name": "CryptoKeyEllipticKeyAlgorithm"
        },
        {
          "name": "CryptoKeyVoprfKeyAlgorithm"
        },
        {
          "name": "CryptoKeyOprfKeyAlgorithm"
        }
      ]
    },
    "kind": "typedef"
  },
  "CryptoKeyEllipticKeyAlgorithm": {
    "name": "CryptoKeyEllipticKeyAlgorithm",
    "members": [
      {
        "name": "name",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "namedCurve",
        "type": {
          "name": "string"
        }
      }
    ],
    "kind": "struct"
  },
  "CryptoKeyHmacKeyAlgorithm": {
    "name": "CryptoKeyHmacKeyAlgorithm",
    "members": [
      {
        "name": "name",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "hash",
        "type": {
          "name": "CryptoKeyKeyAlgorithm"
        }
      },
      {
        "name": "length",
        "type": {
          "name": "integer"
        }
      }
    ],
    "kind": "struct"
  },
  "CryptoKeyKeyAlgorithm": {
    "name": "CryptoKeyKeyAlgorithm",
    "members": [
      {
        "name": "name",
        "type": {
          "name": "string"
        }
      }
    ],
    "kind": "struct"
  },
  "CryptoKeyOprfKeyAlgorithm": {
    "name": "CryptoKeyOprfKeyAlgorithm",
    "members": [
      {
        "name": "name",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "namedCurve",
        "type": {
          "name": "string"
        }
      }
    ],
    "kind": "struct"
  },
  "CryptoKeyPair": {
    "name": "CryptoKeyPair",
    "members": [
      {
        "name": "publicKey",
        "type": {
          "name": "CryptoKey"
        }
      },
      {
        "name": "privateKey",
        "type": {
          "name": "CryptoKey"
        }
      }
    ],
    "kind": "struct"
  },
  "CryptoKeyRsaKeyAlgorithm": {
    "name": "CryptoKeyRsaKeyAlgorithm",
    "members": [
      {
        "name": "name",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "modulusLength",
        "type": {
          "name": "integer"
        }
      },
      {
        "name": "publicExponent",
        "type": {
          "name": "ArrayBuffer"
        }
      },
      {
        "name": "hash",
        "type": {
          "name": "CryptoKeyKeyAlgorithm",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "CryptoKeyVoprfKeyAlgorithm": {
    "name": "CryptoKeyVoprfKeyAlgorithm",
    "members": [
      {
        "name": "name",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "hash",
        "type": {
          "name": "CryptoKeyKeyAlgorithm"
        }
      },
      {
        "name": "namedCurve",
        "type": {
          "name": "string"
        }
      }
    ],
    "kind": "struct"
  },
  "DOMException": {
    "name": "DOMException",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "message",
              "type": {
                "name": "string",
                "optional": true
              }
            },
            {
              "name": "name",
              "type": {
                "name": "string",
                "optional": true
              }
            }
          ]
        }
      },
      {
        "name": "code",
        "type": {
          "name": "number"
        },
        "readonly": true
      },
      {
        "name": "INDEX_SIZE_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "DOMSTRING_SIZE_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "HIERARCHY_REQUEST_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "WRONG_DOCUMENT_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "INVALID_CHARACTER_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "NO_DATA_ALLOWED_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "NO_MODIFICATION_ALLOWED_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "NOT_FOUND_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "NOT_SUPPORTED_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "INUSE_ATTRIBUTE_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "INVALID_STATE_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "SYNTAX_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "INVALID_MODIFICATION_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "NAMESPACE_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "INVALID_ACCESS_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "VALIDATION_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "TYPE_MISMATCH_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "SECURITY_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "NETWORK_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "ABORT_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "URL_MISMATCH_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "QUOTA_EXCEEDED_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "TIMEOUT_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "INVALID_NODE_TYPE_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "DATA_CLONE_ERR",
        "type": {
          "name": "number"
        },
        "static": true,
        "readonly": true
      }
    ],
    "extends": [
      {
        "name": "Error"
      }
    ],
    "kind": "class"
  },
  "Doctype": {
    "name": "Doctype",
    "members": [
      {
        "name": "name",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "string"
            },
            {
              "name": "null"
            }
          ]
        },
        "readonly": true
      },
      {
        "name": "publicId",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "string"
            },
            {
              "name": "null"
            }
          ]
        },
        "readonly": true
      },
      {
        "name": "systemId",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "string"
            },
            {
              "name": "null"
            }
          ]
        },
        "readonly": true
      }
    ],
    "kind": "class"
  },
  "DocumentEnd": {
    "name": "DocumentEnd",
    "members": [
      {
        "name": "append",
        "type": {
          "params": [
            {
              "name": "content",
              "type": {
                "name": "Content"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "ContentOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "DocumentEnd"
          }
        }
      }
    ],
    "kind": "class"
  },
  "DurableObject": {
    "name": "DurableObject",
    "members": [
      {
        "name": "fetch",
        "type": {
          "params": [
            {
              "name": "request",
              "type": {
                "name": "Request"
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "Response"
              }
            ]
          }
        }
      }
    ],
    "kind": "struct"
  },
  "DurableObjectGetOptions": {
    "name": "DurableObjectGetOptions",
    "members": [
      {
        "name": "allowConcurrency",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "noCache",
        "type": {
          "name": "boolean",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "DurableObjectId": {
    "name": "DurableObjectId",
    "members": [
      {
        "name": "toString",
        "type": {
          "params": [],
          "returns": {
            "name": "string"
          }
        }
      },
      {
        "name": "equals",
        "type": {
          "params": [
            {
              "name": "other",
              "type": {
                "name": "DurableObjectId"
              }
            }
          ],
          "returns": {
            "name": "boolean"
          }
        }
      },
      {
        "name": "name",
        "type": {
          "name": "string",
          "optional": true
        },
        "readonly": true
      }
    ],
    "kind": "class"
  },
  "DurableObjectListOptions": {
    "name": "DurableObjectListOptions",
    "members": [
      {
        "name": "start",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "end",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "prefix",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "reverse",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "limit",
        "type": {
          "name": "integer",
          "optional": true
        }
      },
      {
        "name": "allowConcurrency",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "noCache",
        "type": {
          "name": "boolean",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "DurableObjectNamespace": {
    "name": "DurableObjectNamespace",
    "members": [
      {
        "name": "newUniqueId",
        "type": {
          "params": [
            {
              "name": "options",
              "type": {
                "name": "DurableObjectNamespaceNewUniqueIdOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "DurableObjectId"
          }
        }
      },
      {
        "name": "idFromName",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "DurableObjectId"
          }
        }
      },
      {
        "name": "idFromString",
        "type": {
          "params": [
            {
              "name": "id",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "DurableObjectId"
          }
        }
      },
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "id",
              "type": {
                "name": "DurableObjectId"
              }
            }
          ],
          "returns": {
            "name": "DurableObjectStub"
          }
        }
      }
    ],
    "kind": "class"
  },
  "DurableObjectNamespaceNewUniqueIdOptions": {
    "name": "DurableObjectNamespaceNewUniqueIdOptions",
    "members": [
      {
        "name": "jurisdiction",
        "type": {
          "name": "string",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "DurableObjectPutOptions": {
    "name": "DurableObjectPutOptions",
    "members": [
      {
        "name": "allowConcurrency",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "allowUnconfirmed",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "noCache",
        "type": {
          "name": "boolean",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "DurableObjectState": {
    "name": "DurableObjectState",
    "members": [
      {
        "name": "waitUntil",
        "type": {
          "params": [
            {
              "name": "promise",
              "type": {
                "name": "Promise",
                "args": [
                  {
                    "name": "any"
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "id",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "DurableObjectId"
            },
            {
              "name": "string"
            }
          ]
        },
        "readonly": true
      },
      {
        "name": "storage",
        "type": {
          "name": "DurableObjectStorage"
        },
        "readonly": true
      },
      {
        "name": "blockConcurrencyWhile",
        "type": {
          "params": [
            {
              "name": "callback",
              "type": {
                "params": [],
                "returns": {
                  "name": "Promise",
                  "args": [
                    {
                      "name": "T"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "T"
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "T"
          }
        ]
      }
    ],
    "kind": "class"
  },
  "DurableObjectStorage": {
    "name": "DurableObjectStorage",
    "members": [
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "DurableObjectGetOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "|",
                "args": [
                  {
                    "name": "T"
                  },
                  {
                    "name": "undefined"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "T",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "keys",
              "type": {
                "name": "[]",
                "args": [
                  {
                    "name": "string"
                  }
                ]
              }
            },
            {
              "name": "options",
              "type": {
                "name": "DurableObjectGetOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "Map",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "T"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "T",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "list",
        "type": {
          "params": [
            {
              "name": "options",
              "type": {
                "name": "DurableObjectListOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "Map",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "T"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "T",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "put",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "T"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "DurableObjectPutOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "T"
          }
        ]
      },
      {
        "name": "put",
        "type": {
          "params": [
            {
              "name": "entries",
              "type": {
                "name": "Record",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "T"
                  }
                ]
              }
            },
            {
              "name": "options",
              "type": {
                "name": "DurableObjectPutOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "T"
          }
        ]
      },
      {
        "name": "delete",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "DurableObjectPutOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "boolean"
              }
            ]
          }
        }
      },
      {
        "name": "delete",
        "type": {
          "params": [
            {
              "name": "keys",
              "type": {
                "name": "[]",
                "args": [
                  {
                    "name": "string"
                  }
                ]
              }
            },
            {
              "name": "options",
              "type": {
                "name": "DurableObjectPutOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "number"
              }
            ]
          }
        }
      },
      {
        "name": "deleteAll",
        "type": {
          "params": [
            {
              "name": "options",
              "type": {
                "name": "DurableObjectPutOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        }
      },
      {
        "name": "transaction",
        "type": {
          "params": [
            {
              "name": "closure",
              "type": {
                "params": [
                  {
                    "name": "txn",
                    "type": {
                      "name": "DurableObjectTransaction"
                    }
                  }
                ],
                "returns": {
                  "name": "Promise",
                  "args": [
                    {
                      "name": "T"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "T"
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "T"
          }
        ]
      }
    ],
    "kind": "class"
  },
  "DurableObjectStorageOperationsGetOptions": {
    "name": "DurableObjectStorageOperationsGetOptions",
    "type": {
      "name": "DurableObjectGetOptions"
    },
    "comment": {
      "text": "",
      "deprecated": "Don't use. Introduced incidentally in 3.x. Scheduled for removal."
    },
    "kind": "typedef"
  },
  "DurableObjectStorageOperationsListOptions": {
    "name": "DurableObjectStorageOperationsListOptions",
    "type": {
      "name": "DurableObjectListOptions"
    },
    "comment": {
      "text": "",
      "deprecated": "Don't use. Introduced incidentally in 3.x. Scheduled for removal."
    },
    "kind": "typedef"
  },
  "DurableObjectStorageOperationsPutOptions": {
    "name": "DurableObjectStorageOperationsPutOptions",
    "type": {
      "name": "DurableObjectPutOptions"
    },
    "comment": {
      "text": "",
      "deprecated": "Don't use. Introduced incidentally in 3.x. Scheduled for removal."
    },
    "kind": "typedef"
  },
  "DurableObjectStub": {
    "name": "DurableObjectStub",
    "members": [
      {
        "name": "id",
        "type": {
          "name": "DurableObjectId"
        },
        "readonly": true
      },
      {
        "name": "name",
        "type": {
          "name": "string",
          "optional": true
        },
        "readonly": true
      }
    ],
    "extends": [
      {
        "name": "Fetcher"
      }
    ],
    "kind": "class"
  },
  "DurableObjectTransaction": {
    "name": "DurableObjectTransaction",
    "members": [
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "DurableObjectGetOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "T"
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "T",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "keys",
              "type": {
                "name": "[]",
                "args": [
                  {
                    "name": "string"
                  }
                ]
              }
            },
            {
              "name": "options",
              "type": {
                "name": "DurableObjectGetOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "Map",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "T"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "T",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "list",
        "type": {
          "params": [
            {
              "name": "options",
              "type": {
                "name": "DurableObjectListOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "Map",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "T"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "T",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "put",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "T"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "DurableObjectPutOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "T"
          }
        ]
      },
      {
        "name": "put",
        "type": {
          "params": [
            {
              "name": "entries",
              "type": {
                "name": "Record",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "T"
                  }
                ]
              }
            },
            {
              "name": "options",
              "type": {
                "name": "DurableObjectPutOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "T"
          }
        ]
      },
      {
        "name": "delete",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "DurableObjectPutOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "boolean"
              }
            ]
          }
        }
      },
      {
        "name": "delete",
        "type": {
          "params": [
            {
              "name": "keys",
              "type": {
                "name": "[]",
                "args": [
                  {
                    "name": "string"
                  }
                ]
              }
            },
            {
              "name": "options",
              "type": {
                "name": "DurableObjectPutOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "number"
              }
            ]
          }
        }
      },
      {
        "name": "rollback",
        "type": {
          "params": [],
          "returns": {
            "name": "void"
          }
        }
      }
    ],
    "kind": "class"
  },
  "Element": {
    "name": "Element",
    "members": [
      {
        "name": "tagName",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "attributes",
        "type": {
          "name": "IterableIterator",
          "args": [
            {
              "name": "[]",
              "args": [
                {
                  "name": "string"
                }
              ]
            }
          ]
        },
        "readonly": true
      },
      {
        "name": "removed",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "namespaceURI",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "getAttribute",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "|",
            "args": [
              {
                "name": "string"
              },
              {
                "name": "null"
              }
            ]
          }
        }
      },
      {
        "name": "hasAttribute",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "boolean"
          }
        }
      },
      {
        "name": "setAttribute",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "Element"
          }
        }
      },
      {
        "name": "removeAttribute",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "Element"
          }
        }
      },
      {
        "name": "before",
        "type": {
          "params": [
            {
              "name": "content",
              "type": {
                "name": "Content"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "ContentOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Element"
          }
        }
      },
      {
        "name": "after",
        "type": {
          "params": [
            {
              "name": "content",
              "type": {
                "name": "Content"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "ContentOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Element"
          }
        }
      },
      {
        "name": "prepend",
        "type": {
          "params": [
            {
              "name": "content",
              "type": {
                "name": "Content"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "ContentOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Element"
          }
        }
      },
      {
        "name": "append",
        "type": {
          "params": [
            {
              "name": "content",
              "type": {
                "name": "Content"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "ContentOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Element"
          }
        }
      },
      {
        "name": "replace",
        "type": {
          "params": [
            {
              "name": "content",
              "type": {
                "name": "Content"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "ContentOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Element"
          }
        }
      },
      {
        "name": "remove",
        "type": {
          "params": [],
          "returns": {
            "name": "Element"
          }
        }
      },
      {
        "name": "removeAndKeepContent",
        "type": {
          "params": [],
          "returns": {
            "name": "Element"
          }
        }
      },
      {
        "name": "setInnerContent",
        "type": {
          "params": [
            {
              "name": "content",
              "type": {
                "name": "Content"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "ContentOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Element"
          }
        }
      }
    ],
    "kind": "class"
  },
  "Event": {
    "name": "Event",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "type",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "init",
              "type": {
                "name": "EventInit",
                "optional": true
              }
            }
          ]
        }
      },
      {
        "name": "type",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "eventPhase",
        "type": {
          "name": "integer"
        },
        "readonly": true
      },
      {
        "name": "composed",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "bubbles",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "cancelable",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "defaultPrevented",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "returnValue",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "currentTarget",
        "type": {
          "name": "EventTarget",
          "optional": true
        },
        "readonly": true
      },
      {
        "name": "srcElement",
        "type": {
          "name": "EventTarget",
          "optional": true
        },
        "readonly": true
      },
      {
        "name": "timeStamp",
        "type": {
          "name": "double"
        },
        "readonly": true
      },
      {
        "name": "isTrusted",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "cancelBubble",
        "type": {
          "name": "boolean"
        }
      },
      {
        "name": "stopImmediatePropagation",
        "type": {
          "params": [],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "preventDefault",
        "type": {
          "params": [],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "stopPropagation",
        "type": {
          "params": [],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "composedPath",
        "type": {
          "params": [],
          "returns": {
            "name": "[]",
            "args": [
              {
                "name": "EventTarget"
              }
            ]
          }
        }
      },
      {
        "name": "NONE",
        "type": {
          "name": "integer"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "CAPTURING_PHASE",
        "type": {
          "name": "integer"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "AT_TARGET",
        "type": {
          "name": "integer"
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "BUBBLING_PHASE",
        "type": {
          "name": "integer"
        },
        "static": true,
        "readonly": true
      }
    ],
    "kind": "class"
  },
  "EventInit": {
    "name": "EventInit",
    "members": [
      {
        "name": "bubbles",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "cancelable",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "composed",
        "type": {
          "name": "boolean",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "EventListener": {
    "name": "EventListener",
    "type": {
      "params": [
        {
          "name": "event",
          "type": {
            "name": "EventType"
          }
        }
      ],
      "returns": {
        "name": "void"
      }
    },
    "typeparams": [
      {
        "name": "EventType",
        "constraint": {
          "name": "Event"
        },
        "default": {
          "name": "Event"
        }
      }
    ],
    "kind": "typedef"
  },
  "EventListenerObject": {
    "name": "EventListenerObject",
    "members": [
      {
        "name": "handleEvent",
        "type": {
          "params": [
            {
              "name": "event",
              "type": {
                "name": "EventType"
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      }
    ],
    "typeparams": [
      {
        "name": "EventType",
        "constraint": {
          "name": "Event"
        },
        "default": {
          "name": "Event"
        }
      }
    ],
    "kind": "struct"
  },
  "EventListenerOrEventListenerObject": {
    "name": "EventListenerOrEventListenerObject",
    "type": {
      "name": "|",
      "args": [
        {
          "name": "EventListener",
          "args": [
            {
              "name": "EventType"
            }
          ]
        },
        {
          "name": "EventListenerObject",
          "args": [
            {
              "name": "EventType"
            }
          ]
        }
      ]
    },
    "typeparams": [
      {
        "name": "EventType",
        "constraint": {
          "name": "Event"
        },
        "default": {
          "name": "Event"
        }
      }
    ],
    "kind": "typedef"
  },
  "EventTarget": {
    "name": "EventTarget",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": []
        }
      },
      {
        "name": "addEventListener",
        "type": {
          "params": [
            {
              "name": "type",
              "type": {
                "name": "Type"
              }
            },
            {
              "name": "handler",
              "type": {
                "name": "EventListenerOrEventListenerObject",
                "args": [
                  {
                    "name": "EventMap",
                    "index": {
                      "name": "Type"
                    }
                  }
                ]
              }
            },
            {
              "name": "options",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "EventTargetAddEventListenerOptions"
                  },
                  {
                    "name": "boolean"
                  }
                ],
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        },
        "typeparams": [
          {
            "name": "Type",
            "constraint": {
              "name": "keyof",
              "args": [
                {
                  "name": "EventMap"
                }
              ]
            }
          }
        ]
      },
      {
        "name": "removeEventListener",
        "type": {
          "params": [
            {
              "name": "type",
              "type": {
                "name": "Type"
              }
            },
            {
              "name": "handler",
              "type": {
                "name": "EventListenerOrEventListenerObject",
                "args": [
                  {
                    "name": "EventMap",
                    "index": {
                      "name": "Type"
                    }
                  }
                ]
              }
            },
            {
              "name": "options",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "EventTargetEventListenerOptions"
                  },
                  {
                    "name": "boolean"
                  }
                ],
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        },
        "typeparams": [
          {
            "name": "Type",
            "constraint": {
              "name": "keyof",
              "args": [
                {
                  "name": "EventMap"
                }
              ]
            }
          }
        ]
      },
      {
        "name": "dispatchEvent",
        "type": {
          "params": [
            {
              "name": "event",
              "type": {
                "name": "EventMap",
                "index": {
                  "name": "keyof",
                  "args": [
                    {
                      "name": "EventMap"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "name": "boolean"
          }
        }
      }
    ],
    "typeparams": [
      {
        "name": "EventMap",
        "constraint": {
          "name": "Record",
          "args": [
            {
              "name": "string"
            },
            {
              "name": "Event"
            }
          ]
        },
        "default": {
          "name": "Record",
          "args": [
            {
              "name": "string"
            },
            {
              "name": "Event"
            }
          ]
        }
      }
    ],
    "kind": "class"
  },
  "EventTargetAddEventListenerOptions": {
    "name": "EventTargetAddEventListenerOptions",
    "members": [
      {
        "name": "capture",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "passive",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "once",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "signal",
        "type": {
          "name": "AbortSignal",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "EventTargetEventListenerOptions": {
    "name": "EventTargetEventListenerOptions",
    "members": [
      {
        "name": "capture",
        "type": {
          "name": "boolean",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "ExecutionContext": {
    "name": "ExecutionContext",
    "members": [
      {
        "name": "waitUntil",
        "type": {
          "params": [
            {
              "name": "promise",
              "type": {
                "name": "Promise",
                "args": [
                  {
                    "name": "any"
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "passThroughOnException",
        "type": {
          "params": [],
          "returns": {
            "name": "void"
          }
        }
      }
    ],
    "kind": "class"
  },
  "ExportedHandler": {
    "name": "ExportedHandler",
    "members": [
      {
        "name": "fetch",
        "type": {
          "name": "ExportedHandlerFetchHandler",
          "args": [
            {
              "name": "Env"
            }
          ],
          "optional": true
        }
      },
      {
        "name": "scheduled",
        "type": {
          "name": "ExportedHandlerScheduledHandler",
          "args": [
            {
              "name": "Env"
            }
          ],
          "optional": true
        }
      }
    ],
    "typeparams": [
      {
        "name": "Env",
        "default": {
          "name": "unknown"
        }
      }
    ],
    "kind": "struct"
  },
  "ExportedHandlerFetchHandler": {
    "name": "ExportedHandlerFetchHandler",
    "type": {
      "params": [
        {
          "name": "request",
          "type": {
            "name": "Request"
          }
        },
        {
          "name": "env",
          "type": {
            "name": "Env"
          }
        },
        {
          "name": "ctx",
          "type": {
            "name": "ExecutionContext"
          }
        }
      ],
      "returns": {
        "name": "|",
        "args": [
          {
            "name": "Response"
          },
          {
            "name": "Promise",
            "args": [
              {
                "name": "Response"
              }
            ]
          }
        ]
      }
    },
    "typeparams": [
      {
        "name": "Env",
        "default": {
          "name": "unknown"
        }
      }
    ],
    "kind": "typedef"
  },
  "ExportedHandlerScheduledHandler": {
    "name": "ExportedHandlerScheduledHandler",
    "type": {
      "params": [
        {
          "name": "controller",
          "type": {
            "name": "ScheduledController"
          }
        },
        {
          "name": "env",
          "type": {
            "name": "Env"
          }
        },
        {
          "name": "ctx",
          "type": {
            "name": "ExecutionContext"
          }
        }
      ],
      "returns": {
        "name": "|",
        "args": [
          {
            "name": "void"
          },
          {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        ]
      }
    },
    "typeparams": [
      {
        "name": "Env",
        "default": {
          "name": "unknown"
        }
      }
    ],
    "kind": "typedef"
  },
  "FetchEvent": {
    "name": "FetchEvent",
    "members": [
      {
        "name": "request",
        "type": {
          "name": "Request"
        },
        "readonly": true
      },
      {
        "name": "respondWith",
        "type": {
          "params": [
            {
              "name": "promise",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "Response"
                  },
                  {
                    "name": "Promise",
                    "args": [
                      {
                        "name": "Response"
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "passThroughOnException",
        "type": {
          "params": [],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "waitUntil",
        "type": {
          "params": [
            {
              "name": "promise",
              "type": {
                "name": "Promise",
                "args": [
                  {
                    "name": "any"
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      }
    ],
    "extends": [
      {
        "name": "Event"
      }
    ],
    "kind": "class"
  },
  "Fetcher": {
    "name": "Fetcher",
    "members": [
      {
        "name": "fetch",
        "type": {
          "params": [
            {
              "name": "requestOrUrl",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "Request"
                  },
                  {
                    "name": "string"
                  }
                ]
              }
            },
            {
              "name": "requestInit",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "RequestInit"
                  },
                  {
                    "name": "Request"
                  }
                ],
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "Response"
              }
            ]
          }
        }
      }
    ],
    "kind": "class"
  },
  "File": {
    "name": "File",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "bits",
              "type": {
                "name": "BlobBits",
                "optional": true
              }
            },
            {
              "name": "name",
              "type": {
                "name": "string",
                "optional": true
              }
            },
            {
              "name": "options",
              "type": {
                "name": "FileOptions",
                "optional": true
              }
            }
          ]
        }
      },
      {
        "name": "name",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "lastModified",
        "type": {
          "name": "double"
        },
        "readonly": true
      }
    ],
    "extends": [
      {
        "name": "Blob"
      }
    ],
    "kind": "class"
  },
  "FileOptions": {
    "name": "FileOptions",
    "members": [
      {
        "name": "type",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "lastModified",
        "type": {
          "name": "double",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "FixedLengthStream": {
    "name": "FixedLengthStream",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "expectedLength",
              "type": {
                "name": "double"
              }
            }
          ]
        }
      }
    ],
    "extends": [
      {
        "name": "TransformStream"
      }
    ],
    "kind": "class"
  },
  "FormData": {
    "name": "FormData",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": []
        }
      },
      {
        "name": "append",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "append",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "Blob"
              }
            },
            {
              "name": "filename",
              "type": {
                "name": "string",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "delete",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "|",
            "args": [
              {
                "name": "|",
                "args": [
                  {
                    "name": "File"
                  },
                  {
                    "name": "string"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          }
        }
      },
      {
        "name": "getAll",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "[]",
            "args": [
              {
                "name": "|",
                "args": [
                  {
                    "name": "File"
                  },
                  {
                    "name": "string"
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "has",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "boolean"
          }
        }
      },
      {
        "name": "set",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "set",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "Blob"
              }
            },
            {
              "name": "filename",
              "type": {
                "name": "string",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "entries",
        "type": {
          "params": [],
          "returns": {
            "name": "IterableIterator",
            "args": [
              {
                "name": "[]",
                "args": [
                  {
                    "name": "()",
                    "params": [
                      {
                        "name": "key",
                        "type": {
                          "name": "string"
                        }
                      },
                      {
                        "name": "value",
                        "type": {
                          "name": "|",
                          "args": [
                            {
                              "name": "File"
                            },
                            {
                              "name": "string"
                            }
                          ]
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "keys",
        "type": {
          "params": [],
          "returns": {
            "name": "IterableIterator",
            "args": [
              {
                "name": "string"
              }
            ]
          }
        }
      },
      {
        "name": "values",
        "type": {
          "params": [],
          "returns": {
            "name": "IterableIterator",
            "args": [
              {
                "name": "|",
                "args": [
                  {
                    "name": "File"
                  },
                  {
                    "name": "string"
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "forEach",
        "type": {
          "params": [
            {
              "name": "callback",
              "type": {
                "params": [
                  {
                    "name": "this",
                    "type": {
                      "name": "This"
                    }
                  },
                  {
                    "name": "key",
                    "type": {
                      "name": "string"
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "name": "|",
                      "args": [
                        {
                          "name": "File"
                        },
                        {
                          "name": "string"
                        }
                      ]
                    }
                  },
                  {
                    "name": "parent",
                    "type": {
                      "name": "FormData"
                    }
                  }
                ],
                "returns": {
                  "name": "void"
                }
              }
            },
            {
              "name": "thisArg",
              "type": {
                "name": "This",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        },
        "typeparams": [
          {
            "name": "This",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "[Symbol.iterator]",
        "type": {
          "params": [],
          "returns": {
            "name": "IterableIterator",
            "args": [
              {
                "name": "[]",
                "args": [
                  {
                    "name": "()",
                    "params": [
                      {
                        "name": "key",
                        "type": {
                          "name": "string"
                        }
                      },
                      {
                        "name": "value",
                        "type": {
                          "name": "|",
                          "args": [
                            {
                              "name": "File"
                            },
                            {
                              "name": "string"
                            }
                          ]
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    ],
    "kind": "class"
  },
  "HTMLRewriter": {
    "name": "HTMLRewriter",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": []
        }
      },
      {
        "name": "on",
        "type": {
          "params": [
            {
              "name": "selector",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "handlers",
              "type": {
                "name": "HTMLRewriterElementContentHandlers"
              }
            }
          ],
          "returns": {
            "name": "HTMLRewriter"
          }
        }
      },
      {
        "name": "onDocument",
        "type": {
          "params": [
            {
              "name": "handlers",
              "type": {
                "name": "HTMLRewriterDocumentContentHandlers"
              }
            }
          ],
          "returns": {
            "name": "HTMLRewriter"
          }
        }
      },
      {
        "name": "transform",
        "type": {
          "params": [
            {
              "name": "response",
              "type": {
                "name": "Response"
              }
            }
          ],
          "returns": {
            "name": "Response"
          }
        }
      }
    ],
    "kind": "class"
  },
  "HTMLRewriterDocumentContentHandlers": {
    "name": "HTMLRewriterDocumentContentHandlers",
    "members": [
      {
        "name": "doctype",
        "type": {
          "params": [
            {
              "name": "doctype",
              "type": {
                "name": "Doctype"
              }
            }
          ],
          "returns": {
            "name": "|",
            "args": [
              {
                "name": "void"
              },
              {
                "name": "Promise",
                "args": [
                  {
                    "name": "void"
                  }
                ]
              }
            ]
          },
          "optional": true
        }
      },
      {
        "name": "comments",
        "type": {
          "params": [
            {
              "name": "comment",
              "type": {
                "name": "Comment"
              }
            }
          ],
          "returns": {
            "name": "|",
            "args": [
              {
                "name": "void"
              },
              {
                "name": "Promise",
                "args": [
                  {
                    "name": "void"
                  }
                ]
              }
            ]
          },
          "optional": true
        }
      },
      {
        "name": "text",
        "type": {
          "params": [
            {
              "name": "text",
              "type": {
                "name": "Text"
              }
            }
          ],
          "returns": {
            "name": "|",
            "args": [
              {
                "name": "void"
              },
              {
                "name": "Promise",
                "args": [
                  {
                    "name": "void"
                  }
                ]
              }
            ]
          },
          "optional": true
        }
      },
      {
        "name": "end",
        "type": {
          "params": [
            {
              "name": "end",
              "type": {
                "name": "DocumentEnd"
              }
            }
          ],
          "returns": {
            "name": "|",
            "args": [
              {
                "name": "void"
              },
              {
                "name": "Promise",
                "args": [
                  {
                    "name": "void"
                  }
                ]
              }
            ]
          },
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "HTMLRewriterElementContentHandlers": {
    "name": "HTMLRewriterElementContentHandlers",
    "members": [
      {
        "name": "element",
        "type": {
          "params": [
            {
              "name": "element",
              "type": {
                "name": "Element"
              }
            }
          ],
          "returns": {
            "name": "|",
            "args": [
              {
                "name": "void"
              },
              {
                "name": "Promise",
                "args": [
                  {
                    "name": "void"
                  }
                ]
              }
            ]
          },
          "optional": true
        }
      },
      {
        "name": "comments",
        "type": {
          "params": [
            {
              "name": "comment",
              "type": {
                "name": "Comment"
              }
            }
          ],
          "returns": {
            "name": "|",
            "args": [
              {
                "name": "void"
              },
              {
                "name": "Promise",
                "args": [
                  {
                    "name": "void"
                  }
                ]
              }
            ]
          },
          "optional": true
        }
      },
      {
        "name": "text",
        "type": {
          "params": [
            {
              "name": "text",
              "type": {
                "name": "Text"
              }
            }
          ],
          "returns": {
            "name": "|",
            "args": [
              {
                "name": "void"
              },
              {
                "name": "Promise",
                "args": [
                  {
                    "name": "void"
                  }
                ]
              }
            ]
          },
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "Headers": {
    "name": "Headers",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "init",
              "type": {
                "name": "HeadersInit",
                "optional": true
              }
            }
          ]
        }
      },
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "|",
            "args": [
              {
                "name": "string"
              },
              {
                "name": "null"
              }
            ]
          }
        }
      },
      {
        "name": "getAll",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "[]",
            "args": [
              {
                "name": "string"
              }
            ]
          }
        }
      },
      {
        "name": "has",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "boolean"
          }
        }
      },
      {
        "name": "set",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "append",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "delete",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "forEach",
        "type": {
          "params": [
            {
              "name": "callback",
              "type": {
                "params": [
                  {
                    "name": "this",
                    "type": {
                      "name": "This"
                    }
                  },
                  {
                    "name": "key",
                    "type": {
                      "name": "string"
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "name": "string"
                    }
                  },
                  {
                    "name": "parent",
                    "type": {
                      "name": "Headers"
                    }
                  }
                ],
                "returns": {
                  "name": "void"
                }
              }
            },
            {
              "name": "thisArg",
              "type": {
                "name": "This",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        },
        "typeparams": [
          {
            "name": "This",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "entries",
        "type": {
          "params": [],
          "returns": {
            "name": "IterableIterator",
            "args": [
              {
                "name": "()",
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "name": "string"
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "name": "string"
                    }
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "keys",
        "type": {
          "params": [],
          "returns": {
            "name": "IterableIterator",
            "args": [
              {
                "name": "string"
              }
            ]
          }
        }
      },
      {
        "name": "values",
        "type": {
          "params": [],
          "returns": {
            "name": "IterableIterator",
            "args": [
              {
                "name": "string"
              }
            ]
          }
        }
      },
      {
        "name": "[Symbol.iterator]",
        "type": {
          "params": [],
          "returns": {
            "name": "IterableIterator",
            "args": [
              {
                "name": "()",
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "name": "string"
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "name": "string"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    ],
    "kind": "class"
  },
  "HeadersInit": {
    "name": "HeadersInit",
    "type": {
      "name": "|",
      "args": [
        {
          "name": "Headers"
        },
        {
          "name": "Record",
          "args": [
            {
              "name": "string"
            },
            {
              "name": "string"
            }
          ]
        },
        {
          "name": "[]",
          "args": [
            {
              "name": "()",
              "params": [
                {
                  "name": "key",
                  "type": {
                    "name": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "name": "string"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    "kind": "typedef"
  },
  "HeadersInitializer": {
    "name": "HeadersInitializer",
    "type": {
      "name": "HeadersInit"
    },
    "comment": {
      "text": "Back compat for code migrating to older definitions.",
      "deprecated": "Use HeadersInit instead."
    },
    "kind": "typedef"
  },
  "IncomingRequestCfProperties": {
    "name": "IncomingRequestCfProperties",
    "members": [
      {
        "name": "asn",
        "type": {
          "name": "number"
        },
        "comment": {
          "text": "(e.g. 395747)"
        }
      },
      {
        "name": "asOrganization",
        "type": {
          "name": "string"
        },
        "comment": {
          "text": "The organisation which owns the ASN of the incoming request.\n(e.g. Google Cloud)"
        }
      },
      {
        "name": "botManagement",
        "type": {
          "name": "IncomingRequestCfPropertiesBotManagement",
          "optional": true
        }
      },
      {
        "name": "city",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "clientTcpRtt",
        "type": {
          "name": "number"
        }
      },
      {
        "name": "clientTrustScore",
        "type": {
          "name": "number",
          "optional": true
        }
      },
      {
        "name": "colo",
        "type": {
          "name": "string"
        },
        "comment": {
          "text": "The three-letter airport code of the data center that the request\nhit. (e.g. \"DFW\")"
        }
      },
      {
        "name": "continent",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "country",
        "type": {
          "name": "string"
        },
        "comment": {
          "text": "The two-letter country code in the request. This is the same value\nas that provided in the CF-IPCountry header. (e.g. \"US\")"
        }
      },
      {
        "name": "httpProtocol",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "latitude",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "longitude",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "metroCode",
        "type": {
          "name": "string",
          "optional": true
        },
        "comment": {
          "text": "DMA metro code from which the request was issued, e.g. \"635\""
        }
      },
      {
        "name": "postalCode",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "region",
        "type": {
          "name": "string",
          "optional": true
        },
        "comment": {
          "text": "e.g. \"Texas\""
        }
      },
      {
        "name": "regionCode",
        "type": {
          "name": "string",
          "optional": true
        },
        "comment": {
          "text": "e.g. \"TX\""
        }
      },
      {
        "name": "requestPriority",
        "type": {
          "name": "string"
        },
        "comment": {
          "text": "e.g. \"weight=256;exclusive=1\""
        }
      },
      {
        "name": "timezone",
        "type": {
          "name": "string",
          "optional": true
        },
        "comment": {
          "text": "e.g. \"America/Chicago\""
        }
      },
      {
        "name": "tlsVersion",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "tlsCipher",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "tlsClientAuth",
        "type": {
          "name": "IncomingRequestCfPropertiesTLSClientAuth"
        }
      }
    ],
    "comment": {
      "text": "In addition to the properties on the standard Request object,\nthe cf object contains extra information about the request provided\nby Cloudflare's edge.\n\nNote: Currently, settings in the cf object cannot be accessed in the\nplayground."
    },
    "kind": "struct"
  },
  "IncomingRequestCfPropertiesBotManagement": {
    "name": "IncomingRequestCfPropertiesBotManagement",
    "members": [
      {
        "name": "score",
        "type": {
          "name": "number"
        }
      },
      {
        "name": "staticResource",
        "type": {
          "name": "boolean"
        }
      },
      {
        "name": "verifiedBot",
        "type": {
          "name": "boolean"
        }
      }
    ],
    "kind": "struct"
  },
  "IncomingRequestCfPropertiesTLSClientAuth": {
    "name": "IncomingRequestCfPropertiesTLSClientAuth",
    "members": [
      {
        "name": "certIssuerDNLegacy",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "certIssuerDN",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "certPresented",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "\"0\""
            },
            {
              "name": "\"1\""
            }
          ]
        }
      },
      {
        "name": "certSubjectDNLegacy",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "certSubjectDN",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "certNotBefore",
        "type": {
          "name": "string"
        },
        "comment": {
          "text": "In format \"Dec 22 19:39:00 2018 GMT\""
        }
      },
      {
        "name": "certNotAfter",
        "type": {
          "name": "string"
        },
        "comment": {
          "text": "In format \"Dec 22 19:39:00 2018 GMT\""
        }
      },
      {
        "name": "certSerial",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "certFingerprintSHA1",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "certVerified",
        "type": {
          "name": "string"
        },
        "comment": {
          "text": "\"SUCCESS\", \"FAILED:reason\", \"NONE\""
        }
      }
    ],
    "kind": "struct"
  },
  "KVNamespace": {
    "name": "KVNamespace",
    "members": [
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "Partial",
                "args": [
                  {
                    "name": "KVNamespaceGetOptions",
                    "args": [
                      {
                        "name": "undefined"
                      }
                    ]
                  }
                ],
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "null"
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "type",
              "type": {
                "name": "\"text\""
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "null"
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "type",
              "type": {
                "name": "\"json\""
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "|",
                "args": [
                  {
                    "name": "ExpectedValue"
                  },
                  {
                    "name": "null"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "ExpectedValue",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "type",
              "type": {
                "name": "\"arrayBuffer\""
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "|",
                "args": [
                  {
                    "name": "ArrayBuffer"
                  },
                  {
                    "name": "null"
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "type",
              "type": {
                "name": "\"stream\""
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "|",
                "args": [
                  {
                    "name": "ReadableStream"
                  },
                  {
                    "name": "null"
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "KVNamespaceGetOptions",
                "args": [
                  {
                    "name": "\"text\""
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "null"
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "KVNamespaceGetOptions",
                "args": [
                  {
                    "name": "\"json\""
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "|",
                "args": [
                  {
                    "name": "ExpectedValue"
                  },
                  {
                    "name": "null"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "ExpectedValue",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "KVNamespaceGetOptions",
                "args": [
                  {
                    "name": "\"arrayBuffer\""
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "|",
                "args": [
                  {
                    "name": "ArrayBuffer"
                  },
                  {
                    "name": "null"
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "KVNamespaceGetOptions",
                "args": [
                  {
                    "name": "\"stream\""
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "|",
                "args": [
                  {
                    "name": "ReadableStream"
                  },
                  {
                    "name": "null"
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "list",
        "type": {
          "params": [
            {
              "name": "options",
              "type": {
                "name": "KVNamespaceListOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "KVNamespaceListResult",
                "args": [
                  {
                    "name": "Metadata"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "Metadata",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "put",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "ArrayBuffer"
                  },
                  {
                    "name": "ArrayBufferView"
                  },
                  {
                    "name": "ReadableStream"
                  }
                ]
              }
            },
            {
              "name": "options",
              "type": {
                "name": "KVNamespacePutOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        },
        "comment": {
          "text": "Creates a new key-value pair, or updates the value for a particular key.",
          "params": [
            {
              "name": "key",
              "text": "key to associate with the value. A key cannot be empty, `.` or `..`. All other keys are valid."
            },
            {
              "name": "value",
              "text": "value to store. The type is inferred. The maximum size of a value is 25MB."
            }
          ],
          "returns": "Returns a `Promise` that you should `await` on in order to verify a successful update.",
          "examples": {
            "typescript": [
              "await NAMESPACE.put(key, value)"
            ]
          }
        }
      },
      {
        "name": "getWithMetadata",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "Partial",
                "args": [
                  {
                    "name": "KVNamespaceGetOptions",
                    "args": [
                      {
                        "name": "undefined"
                      }
                    ]
                  }
                ],
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "KVNamespaceGetWithMetadataResult",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "Metadata"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "Metadata",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "getWithMetadata",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "type",
              "type": {
                "name": "\"text\""
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "KVNamespaceGetWithMetadataResult",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "Metadata"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "Metadata",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "getWithMetadata",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "type",
              "type": {
                "name": "\"json\""
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "KVNamespaceGetWithMetadataResult",
                "args": [
                  {
                    "name": "ExpectedValue"
                  },
                  {
                    "name": "Metadata"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "ExpectedValue",
            "default": {
              "name": "unknown"
            }
          },
          {
            "name": "Metadata",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "getWithMetadata",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "type",
              "type": {
                "name": "\"arrayBuffer\""
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "KVNamespaceGetWithMetadataResult",
                "args": [
                  {
                    "name": "ArrayBuffer"
                  },
                  {
                    "name": "Metadata"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "Metadata",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "getWithMetadata",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "type",
              "type": {
                "name": "\"stream\""
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "KVNamespaceGetWithMetadataResult",
                "args": [
                  {
                    "name": "ReadableStream"
                  },
                  {
                    "name": "Metadata"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "Metadata",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "getWithMetadata",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "KVNamespaceGetOptions",
                "args": [
                  {
                    "name": "\"text\""
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "KVNamespaceGetWithMetadataResult",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "Metadata"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "Metadata",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "getWithMetadata",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "KVNamespaceGetOptions",
                "args": [
                  {
                    "name": "\"json\""
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "KVNamespaceGetWithMetadataResult",
                "args": [
                  {
                    "name": "ExpectedValue"
                  },
                  {
                    "name": "Metadata"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "ExpectedValue",
            "default": {
              "name": "unknown"
            }
          },
          {
            "name": "Metadata",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "getWithMetadata",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "KVNamespaceGetOptions",
                "args": [
                  {
                    "name": "\"arrayBuffer\""
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "KVNamespaceGetWithMetadataResult",
                "args": [
                  {
                    "name": "ArrayBuffer"
                  },
                  {
                    "name": "Metadata"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "Metadata",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "getWithMetadata",
        "type": {
          "params": [
            {
              "name": "key",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "KVNamespaceGetOptions",
                "args": [
                  {
                    "name": "\"stream\""
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "KVNamespaceGetWithMetadataResult",
                "args": [
                  {
                    "name": "ReadableStream"
                  },
                  {
                    "name": "Metadata"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "Metadata",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "delete",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        }
      }
    ],
    "comment": {
      "text": "Workers KV is a global, low-latency, key-value data store. It supports exceptionally high read volumes with low-latency,\nmaking it possible to build highly dynamic APIs and websites which respond as quickly as a cached static file would."
    },
    "kind": "class"
  },
  "KVNamespaceGetOptions": {
    "name": "KVNamespaceGetOptions",
    "members": [
      {
        "name": "type",
        "type": {
          "name": "Type"
        }
      },
      {
        "name": "cacheTtl",
        "type": {
          "name": "number",
          "optional": true
        }
      }
    ],
    "typeparams": [
      {
        "name": "Type"
      }
    ],
    "kind": "struct"
  },
  "KVNamespaceGetWithMetadataResult": {
    "name": "KVNamespaceGetWithMetadataResult",
    "members": [
      {
        "name": "value",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "Value"
            },
            {
              "name": "null"
            }
          ]
        }
      },
      {
        "name": "metadata",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "Metadata"
            },
            {
              "name": "null"
            }
          ]
        }
      }
    ],
    "typeparams": [
      {
        "name": "Value"
      },
      {
        "name": "Metadata"
      }
    ],
    "kind": "struct"
  },
  "KVNamespaceListKey": {
    "name": "KVNamespaceListKey",
    "members": [
      {
        "name": "name",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "expiration",
        "type": {
          "name": "number",
          "optional": true
        }
      },
      {
        "name": "metadata",
        "type": {
          "name": "Metadata",
          "optional": true
        }
      }
    ],
    "typeparams": [
      {
        "name": "Metadata"
      }
    ],
    "kind": "struct"
  },
  "KVNamespaceListOptions": {
    "name": "KVNamespaceListOptions",
    "members": [
      {
        "name": "limit",
        "type": {
          "name": "integer",
          "optional": true
        }
      },
      {
        "name": "prefix",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "string"
            },
            {
              "name": "null"
            }
          ],
          "optional": true
        }
      },
      {
        "name": "cursor",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "string"
            },
            {
              "name": "null"
            }
          ],
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "KVNamespaceListResult": {
    "name": "KVNamespaceListResult",
    "members": [
      {
        "name": "keys",
        "type": {
          "name": "[]",
          "args": [
            {
              "name": "KVNamespaceListKey",
              "args": [
                {
                  "name": "Metadata"
                }
              ]
            }
          ]
        }
      },
      {
        "name": "list_complete",
        "type": {
          "name": "boolean"
        }
      },
      {
        "name": "cursor",
        "type": {
          "name": "string",
          "optional": true
        }
      }
    ],
    "typeparams": [
      {
        "name": "Metadata"
      }
    ],
    "kind": "struct"
  },
  "KVNamespacePutOptions": {
    "name": "KVNamespacePutOptions",
    "members": [
      {
        "name": "expiration",
        "type": {
          "name": "integer",
          "optional": true
        }
      },
      {
        "name": "expirationTtl",
        "type": {
          "name": "integer",
          "optional": true
        }
      },
      {
        "name": "metadata",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "any"
            },
            {
              "name": "null"
            }
          ],
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "MessageEvent": {
    "name": "MessageEvent",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "type",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "initializer",
              "type": {
                "name": "MessageEventInit"
              }
            }
          ]
        }
      },
      {
        "name": "data",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "ArrayBuffer"
            },
            {
              "name": "string"
            }
          ]
        },
        "readonly": true
      }
    ],
    "extends": [
      {
        "name": "Event"
      }
    ],
    "kind": "class"
  },
  "MessageEventInit": {
    "name": "MessageEventInit",
    "members": [
      {
        "name": "data",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "ArrayBuffer"
            },
            {
              "name": "string"
            }
          ]
        }
      }
    ],
    "kind": "struct"
  },
  "MessageEventInitializer": {
    "name": "MessageEventInitializer",
    "type": {
      "name": "MessageEventInit"
    },
    "comment": {
      "text": "Back compat for code migrating from older definitions.",
      "deprecated": "Use MessageEventInit instead."
    },
    "kind": "typedef"
  },
  "PipeToOptions": {
    "name": "PipeToOptions",
    "members": [
      {
        "name": "preventClose",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "preventAbort",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "preventCancel",
        "type": {
          "name": "boolean",
          "optional": true
        }
      }
    ],
    "comment": {
      "text": "Transitionary name.",
      "deprecated": "Use StreamPipeOptions"
    },
    "kind": "struct"
  },
  "PromiseRejectionEvent": {
    "name": "PromiseRejectionEvent",
    "members": [
      {
        "name": "promise",
        "type": {
          "name": "Promise",
          "args": [
            {
              "name": "any"
            }
          ]
        },
        "readonly": true
      },
      {
        "name": "reason",
        "type": {
          "name": "any"
        },
        "readonly": true
      }
    ],
    "extends": [
      {
        "name": "Event"
      }
    ],
    "kind": "class"
  },
  "ReadResult": {
    "name": "ReadResult",
    "members": [
      {
        "name": "value",
        "type": {
          "name": "any",
          "optional": true
        }
      },
      {
        "name": "done",
        "type": {
          "name": "boolean"
        }
      }
    ],
    "kind": "struct"
  },
  "ReadableStream": {
    "name": "ReadableStream",
    "members": [
      {
        "name": "locked",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "cancel",
        "type": {
          "params": [
            {
              "name": "reason",
              "type": {
                "name": "any",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        }
      },
      {
        "name": "getReader",
        "type": {
          "params": [
            {
              "name": "options",
              "type": {
                "name": "ReadableStreamGetReaderOptions"
              }
            }
          ],
          "returns": {
            "name": "ReadableStreamBYOBReader"
          }
        }
      },
      {
        "name": "getReader",
        "type": {
          "params": [],
          "returns": {
            "name": "ReadableStreamDefaultReader"
          }
        }
      },
      {
        "name": "pipeThrough",
        "type": {
          "params": [
            {
              "name": "transform",
              "type": {
                "name": "ReadableStreamTransform"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "PipeToOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "ReadableStream"
          }
        }
      },
      {
        "name": "pipeTo",
        "type": {
          "params": [
            {
              "name": "destination",
              "type": {
                "name": "WritableStream"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "PipeToOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        }
      },
      {
        "name": "tee",
        "type": {
          "params": [],
          "returns": {
            "name": "()",
            "params": [
              {
                "name": "",
                "type": {
                  "name": "ReadableStream"
                }
              },
              {
                "name": "",
                "type": {
                  "name": "ReadableStream"
                }
              }
            ]
          }
        }
      }
    ],
    "kind": "class"
  },
  "ReadableStreamBYOBReader": {
    "name": "ReadableStreamBYOBReader",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "stream",
              "type": {
                "name": "ReadableStream"
              }
            }
          ]
        }
      },
      {
        "name": "closed",
        "type": {
          "name": "Promise",
          "args": [
            {
              "name": "void"
            }
          ]
        },
        "readonly": true
      },
      {
        "name": "cancel",
        "type": {
          "params": [
            {
              "name": "reason",
              "type": {
                "name": "any",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        }
      },
      {
        "name": "read",
        "type": {
          "params": [
            {
              "name": "view",
              "type": {
                "name": "T"
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "ReadableStreamReadResult",
                "args": [
                  {
                    "name": "T"
                  }
                ]
              }
            ]
          }
        },
        "typeparams": [
          {
            "name": "T",
            "constraint": {
              "name": "ArrayBufferView"
            }
          }
        ]
      },
      {
        "name": "releaseLock",
        "type": {
          "params": [],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "readAtLeast",
        "type": {
          "params": [
            {
              "name": "minBytes",
              "type": {
                "name": "number"
              }
            },
            {
              "name": "view",
              "type": {
                "name": "Uint8Array"
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "ReadableStreamReadResult",
                "args": [
                  {
                    "name": "Uint8Array"
                  }
                ]
              }
            ]
          }
        }
      }
    ],
    "kind": "class"
  },
  "ReadableStreamDefaultReader": {
    "name": "ReadableStreamDefaultReader",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "stream",
              "type": {
                "name": "ReadableStream"
              }
            }
          ]
        }
      },
      {
        "name": "closed",
        "type": {
          "name": "Promise",
          "args": [
            {
              "name": "void"
            }
          ]
        },
        "readonly": true
      },
      {
        "name": "cancel",
        "type": {
          "params": [
            {
              "name": "reason",
              "type": {
                "name": "any",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        }
      },
      {
        "name": "read",
        "type": {
          "params": [],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "ReadableStreamReadResult",
                "args": [
                  {
                    "name": "any"
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "releaseLock",
        "type": {
          "params": [],
          "returns": {
            "name": "void"
          }
        }
      }
    ],
    "kind": "class"
  },
  "ReadableStreamGetReaderOptions": {
    "name": "ReadableStreamGetReaderOptions",
    "members": [
      {
        "name": "mode",
        "type": {
          "name": "string"
        }
      }
    ],
    "kind": "struct"
  },
  "ReadableStreamPipeToOptions": {
    "name": "ReadableStreamPipeToOptions",
    "type": {
      "name": "PipeToOptions"
    },
    "comment": {
      "text": "Back-compat alias.",
      "deprecated": "Use StreamPipeOptions"
    },
    "kind": "typedef"
  },
  "ReadableStreamReadResult": {
    "name": "ReadableStreamReadResult",
    "type": {
      "name": "|",
      "args": [
        {
          "members": [
            {
              "name": "done",
              "type": {
                "name": "true"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "undefined"
              }
            }
          ]
        },
        {
          "members": [
            {
              "name": "done",
              "type": {
                "name": "false"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "T"
              }
            }
          ]
        }
      ]
    },
    "typeparams": [
      {
        "name": "T",
        "default": {
          "name": "any"
        }
      }
    ],
    "kind": "typedef"
  },
  "ReadableStreamReadableStreamBYOBReader": {
    "name": "ReadableStreamReadableStreamBYOBReader",
    "type": {
      "name": "ReadableStreamBYOBReader"
    },
    "comment": {
      "text": "Back-compat alias.",
      "deprecated": "Use ReadableStreamBYOBReader"
    },
    "kind": "typedef"
  },
  "ReadableStreamReadableStreamDefaultReader": {
    "name": "ReadableStreamReadableStreamDefaultReader",
    "type": {
      "name": "ReadableStreamDefaultReader"
    },
    "comment": {
      "text": "Back-compat alias.",
      "deprecated": "Use ReadableStreamDefaultReader"
    },
    "kind": "typedef"
  },
  "ReadableStreamTransform": {
    "name": "ReadableStreamTransform",
    "members": [
      {
        "name": "writable",
        "type": {
          "name": "WritableStream"
        }
      },
      {
        "name": "readable",
        "type": {
          "name": "ReadableStream"
        }
      }
    ],
    "kind": "struct"
  },
  "Request": {
    "name": "Request",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "input",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "Request"
                  },
                  {
                    "name": "string"
                  }
                ]
              }
            },
            {
              "name": "init",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "RequestInit"
                  },
                  {
                    "name": "Request"
                  }
                ],
                "optional": true
              }
            }
          ]
        }
      },
      {
        "name": "clone",
        "type": {
          "params": [],
          "returns": {
            "name": "Request"
          }
        }
      },
      {
        "name": "method",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "url",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "headers",
        "type": {
          "name": "Headers"
        },
        "readonly": true
      },
      {
        "name": "redirect",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "fetcher",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "Fetcher"
            },
            {
              "name": "null"
            }
          ]
        },
        "readonly": true
      },
      {
        "name": "signal",
        "type": {
          "name": "AbortSignal"
        },
        "readonly": true
      },
      {
        "name": "cf",
        "type": {
          "name": "IncomingRequestCfProperties",
          "optional": true
        },
        "readonly": true
      }
    ],
    "extends": [
      {
        "name": "Body"
      }
    ],
    "kind": "class"
  },
  "RequestInit": {
    "name": "RequestInit",
    "members": [
      {
        "name": "method",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "headers",
        "type": {
          "name": "HeadersInit",
          "optional": true
        }
      },
      {
        "name": "body",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "BodyInit"
            },
            {
              "name": "null"
            }
          ],
          "optional": true
        }
      },
      {
        "name": "redirect",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "fetcher",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "Fetcher"
            },
            {
              "name": "null"
            }
          ],
          "optional": true
        }
      },
      {
        "name": "cf",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "IncomingRequestCfProperties"
            },
            {
              "name": "RequestInitCfProperties"
            }
          ],
          "optional": true
        },
        "comment": {
          "text": "cf is a union of these two types because there are multiple\nscenarios in which it might be one or the other.\n\nIncomingRequestCfProperties is required to allow\n  new Request(someUrl, event.request)\n\nRequestInitCfProperties is required to allow\n  new Request(event.request, {cf: { ... } })\n  fetch(someUrl, {cf: { ... } })"
        }
      },
      {
        "name": "signal",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "AbortSignal"
            },
            {
              "name": "null"
            }
          ],
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "RequestInitCfProperties": {
    "name": "RequestInitCfProperties",
    "members": [
      {
        "name": "cacheEverything",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "cacheKey",
        "type": {
          "name": "string",
          "optional": true
        },
        "comment": {
          "text": "A request's cache key is what determines if two requests are\n\"the same\" for caching purposes. If a request has the same cache key\nas some previous request, then we can serve the same cached response for\nboth. (e.g. 'some-key')\n\nOnly available for Enterprise customers."
        }
      },
      {
        "name": "cacheTtl",
        "type": {
          "name": "number",
          "optional": true
        },
        "comment": {
          "text": "Force response to be cached for a given number of seconds. (e.g. 300)"
        }
      },
      {
        "name": "cacheTtlByStatus",
        "type": {
          "name": "Record",
          "args": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ],
          "optional": true
        },
        "comment": {
          "text": "Force response to be cached for a given number of seconds based on the Origin status code.\n(e.g. { '200-299': 86400, '404': 1, '500-599': 0 })"
        }
      },
      {
        "name": "scrapeShield",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "apps",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "image",
        "type": {
          "name": "RequestInitCfPropertiesImage",
          "optional": true
        }
      },
      {
        "name": "minify",
        "type": {
          "name": "RequestInitCfPropertiesImageMinify",
          "optional": true
        }
      },
      {
        "name": "mirage",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "polish",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "'lossy'"
            },
            {
              "name": "'lossless'"
            },
            {
              "name": "'off'"
            }
          ],
          "optional": true
        }
      },
      {
        "name": "resolveOverride",
        "type": {
          "name": "string",
          "optional": true
        },
        "comment": {
          "text": "Redirects the request to an alternate origin server. You can use this,\nfor example, to implement load balancing across several origins.\n(e.g.us-east.example.com)\n\nNote - For security reasons, the hostname set in resolveOverride must\nbe proxied on the same Cloudflare zone of the incoming request.\nOtherwise, the setting is ignored. CNAME hosts are allowed, so to\nresolve to a host under a different domain or a DNS only domain first\ndeclare a CNAME record within your own zone\u2019s DNS mapping to the\nexternal hostname, set proxy on Cloudflare, then set resolveOverride\nto point to that CNAME record."
        }
      }
    ],
    "comment": {
      "text": "In addition to the properties you can set in the RequestInit dict\nthat you pass as an argument to the Request constructor, you can\nset certain properties of a `cf` object to control how Cloudflare\nfeatures are applied to that new Request.\n\nNote: Currently, these properties cannot be tested in the\nplayground."
    },
    "kind": "struct"
  },
  "RequestInitCfPropertiesImage": {
    "name": "RequestInitCfPropertiesImage",
    "members": [
      {
        "name": "dpr",
        "type": {
          "name": "number",
          "optional": true
        },
        "comment": {
          "text": "Device Pixel Ratio. Default 1. Multiplier for width/height that makes it\neasier to specify higher-DPI sizes in <img srcset>."
        }
      },
      {
        "name": "quality",
        "type": {
          "name": "number",
          "optional": true
        },
        "comment": {
          "text": "Quality setting from 1-100 (useful values are in 60-90 range). Lower values\nmake images look worse, but load faster. The default is 85. It applies only\nto JPEG and WebP images. It doesn\u2019t have any effect on PNG."
        }
      },
      {
        "name": "format",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "\"avif\""
            },
            {
              "name": "\"webp\""
            },
            {
              "name": "\"json\""
            }
          ],
          "optional": true
        },
        "comment": {
          "text": "Output format to generate. It can be:\n - avif: generate images in AVIF format.\n - webp: generate images in Google WebP format. Set quality to 100 to get\n   the WebP-lossless format.\n - json: instead of generating an image, outputs information about the\n   image, in JSON format. The JSON object will contain image size\n   (before and after resizing), source image\u2019s MIME type, file size, etc."
        }
      },
      {
        "name": "metadata",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "\"keep\""
            },
            {
              "name": "\"copyright\""
            },
            {
              "name": "\"none\""
            }
          ],
          "optional": true
        },
        "comment": {
          "text": "What EXIF data should be preserved in the output image. Note that EXIF\nrotation and embedded color profiles are always applied (\"baked in\" into\nthe image), and aren't affected by this option. Note that if the Polish\nfeature is enabled, all metadata may have been removed already and this\noption may have no effect.\n - keep: Preserve most of EXIF metadata, including GPS location if there's\n   any.\n - copyright: Only keep the copyright tag, and discard everything else.\n   This is the default behavior for JPEG files.\n - none: Discard all invisible EXIF metadata. Currently WebP and PNG\n   output formats always discard metadata."
        }
      },
      {
        "name": "draw",
        "type": {
          "name": "[]",
          "args": [
            {
              "name": "RequestInitCfPropertiesImageDraw"
            }
          ],
          "optional": true
        },
        "comment": {
          "text": "Overlays are drawn in the order they appear in the array (last array\nentry is the topmost layer)."
        }
      }
    ],
    "extends": [
      {
        "name": "BasicImageTransformations"
      }
    ],
    "kind": "struct"
  },
  "RequestInitCfPropertiesImageDraw": {
    "name": "RequestInitCfPropertiesImageDraw",
    "members": [
      {
        "name": "url",
        "type": {
          "name": "string"
        },
        "comment": {
          "text": "Absolute URL of the image file to use for the drawing. It can be any of\nthe supported file formats. For drawing of watermarks or non-rectangular\noverlays we recommend using PNG or WebP images."
        }
      },
      {
        "name": "opacity",
        "type": {
          "name": "number",
          "optional": true
        },
        "comment": {
          "text": "Floating-point number between 0 (transparent) and 1 (opaque).\nFor example, opacity: 0.5 makes overlay semitransparent."
        }
      },
      {
        "name": "repeat",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "true"
            },
            {
              "name": "\"x\""
            },
            {
              "name": "\"y\""
            }
          ],
          "optional": true
        },
        "comment": {
          "text": "- If set to true, the overlay image will be tiled to cover the entire\n  area. This is useful for stock-photo-like watermarks.\n- If set to \"x\", the overlay image will be tiled horizontally only\n  (form a line).\n- If set to \"y\", the overlay image will be tiled vertically only\n  (form a line)."
        }
      },
      {
        "name": "top",
        "type": {
          "name": "number",
          "optional": true
        },
        "comment": {
          "text": "Position of the overlay image relative to a given edge. Each property is\nan offset in pixels. 0 aligns exactly to the edge. For example, left: 10\npositions left side of the overlay 10 pixels from the left edge of the\nimage it's drawn over. bottom: 0 aligns bottom of the overlay with bottom\nof the background image.\n\nSetting both left & right, or both top & bottom is an error.\n\nIf no position is specified, the image will be centered."
        }
      },
      {
        "name": "left",
        "type": {
          "name": "number",
          "optional": true
        }
      },
      {
        "name": "bottom",
        "type": {
          "name": "number",
          "optional": true
        }
      },
      {
        "name": "right",
        "type": {
          "name": "number",
          "optional": true
        }
      }
    ],
    "extends": [
      {
        "name": "BasicImageTransformations"
      }
    ],
    "kind": "struct"
  },
  "RequestInitCfPropertiesImageMinify": {
    "name": "RequestInitCfPropertiesImageMinify",
    "members": [
      {
        "name": "javascript",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "css",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "html",
        "type": {
          "name": "boolean",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "RequestInitializerDict": {
    "name": "RequestInitializerDict",
    "type": {
      "name": "RequestInit"
    },
    "comment": {
      "text": "Back compat for code migrating from older definitions.",
      "deprecated": "Use RequestInit instead."
    },
    "kind": "typedef"
  },
  "Response": {
    "name": "Response",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "bodyInit",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "BodyInit"
                  },
                  {
                    "name": "null"
                  }
                ],
                "optional": true
              }
            },
            {
              "name": "maybeInit",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "ResponseInit"
                  },
                  {
                    "name": "Response"
                  }
                ],
                "optional": true
              }
            }
          ]
        }
      },
      {
        "name": "redirect",
        "type": {
          "params": [
            {
              "name": "url",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "status",
              "type": {
                "name": "integer",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Response"
          }
        },
        "static": true
      },
      {
        "name": "clone",
        "type": {
          "params": [],
          "returns": {
            "name": "Response"
          }
        }
      },
      {
        "name": "status",
        "type": {
          "name": "integer"
        },
        "readonly": true
      },
      {
        "name": "statusText",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "headers",
        "type": {
          "name": "Headers"
        },
        "readonly": true
      },
      {
        "name": "ok",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "redirected",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "url",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "webSocket",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "WebSocket"
            },
            {
              "name": "null"
            }
          ]
        },
        "readonly": true
      },
      {
        "name": "cf",
        "type": {
          "name": "Object",
          "optional": true
        },
        "readonly": true
      }
    ],
    "extends": [
      {
        "name": "Body"
      }
    ],
    "kind": "class"
  },
  "ResponseInit": {
    "name": "ResponseInit",
    "members": [
      {
        "name": "status",
        "type": {
          "name": "integer",
          "optional": true
        }
      },
      {
        "name": "statusText",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "headers",
        "type": {
          "name": "HeadersInit",
          "optional": true
        }
      },
      {
        "name": "cf",
        "type": {
          "name": "Object",
          "optional": true
        }
      },
      {
        "name": "webSocket",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "WebSocket"
            },
            {
              "name": "null"
            }
          ],
          "optional": true
        }
      },
      {
        "name": "encodeBody",
        "type": {
          "name": "string",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "ResponseInitializerDict": {
    "name": "ResponseInitializerDict",
    "type": {
      "name": "ResponseInit"
    },
    "comment": {
      "text": "Back compat for code migrating from older definitions.",
      "deprecated": "Use ResponseInit instead."
    },
    "kind": "typedef"
  },
  "ScheduledController": {
    "name": "ScheduledController",
    "members": [
      {
        "name": "scheduledTime",
        "type": {
          "name": "double"
        },
        "readonly": true
      },
      {
        "name": "cron",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "noRetry",
        "type": {
          "params": [],
          "returns": {
            "name": "void"
          }
        }
      }
    ],
    "kind": "class"
  },
  "ScheduledEvent": {
    "name": "ScheduledEvent",
    "members": [
      {
        "name": "scheduledTime",
        "type": {
          "name": "double"
        },
        "readonly": true
      },
      {
        "name": "cron",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "noRetry",
        "type": {
          "params": [],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "waitUntil",
        "type": {
          "params": [
            {
              "name": "promise",
              "type": {
                "name": "Promise",
                "args": [
                  {
                    "name": "any"
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      }
    ],
    "extends": [
      {
        "name": "Event"
      }
    ],
    "kind": "class"
  },
  "ServiceWorkerGlobalScope": {
    "name": "ServiceWorkerGlobalScope",
    "members": [
      {
        "name": "DOMException",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "DOMException"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "WorkerGlobalScope",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "WorkerGlobalScope"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "btoa",
        "type": {
          "params": [
            {
              "name": "data",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "string"
          }
        }
      },
      {
        "name": "atob",
        "type": {
          "params": [
            {
              "name": "data",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "string"
          }
        }
      },
      {
        "name": "setTimeout",
        "type": {
          "params": [
            {
              "name": "callback",
              "type": {
                "params": [
                  {
                    "name": "args",
                    "type": {
                      "name": "Args",
                      "variadic": true
                    }
                  }
                ],
                "returns": {
                  "name": "void"
                }
              }
            },
            {
              "name": "msDelay",
              "type": {
                "name": "number",
                "optional": true
              }
            },
            {
              "name": "args",
              "type": {
                "name": "Args",
                "variadic": true
              }
            }
          ],
          "returns": {
            "name": "number"
          }
        },
        "typeparams": [
          {
            "name": "Args",
            "constraint": {
              "name": "[]",
              "args": [
                {
                  "name": "any"
                }
              ]
            }
          }
        ]
      },
      {
        "name": "clearTimeout",
        "type": {
          "params": [
            {
              "name": "timeoutId",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "double"
                  },
                  {
                    "name": "null"
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "setInterval",
        "type": {
          "params": [
            {
              "name": "callback",
              "type": {
                "params": [
                  {
                    "name": "args",
                    "type": {
                      "name": "Args",
                      "variadic": true
                    }
                  }
                ],
                "returns": {
                  "name": "void"
                }
              }
            },
            {
              "name": "msDelay",
              "type": {
                "name": "number",
                "optional": true
              }
            },
            {
              "name": "args",
              "type": {
                "name": "Args",
                "variadic": true
              }
            }
          ],
          "returns": {
            "name": "number"
          }
        },
        "typeparams": [
          {
            "name": "Args",
            "constraint": {
              "name": "[]",
              "args": [
                {
                  "name": "any"
                }
              ]
            }
          }
        ]
      },
      {
        "name": "clearInterval",
        "type": {
          "params": [
            {
              "name": "timeoutId",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "double"
                  },
                  {
                    "name": "null"
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "queueMicrotask",
        "type": {
          "params": [
            {
              "name": "task",
              "type": {
                "name": "Function"
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "fetch",
        "type": {
          "params": [
            {
              "name": "request",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "Request"
                  },
                  {
                    "name": "string"
                  }
                ]
              }
            },
            {
              "name": "requestInitr",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "RequestInit"
                  },
                  {
                    "name": "Request"
                  }
                ],
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "Response"
              }
            ]
          }
        }
      },
      {
        "name": "self",
        "type": {
          "name": "ServiceWorkerGlobalScope"
        },
        "readonly": true
      },
      {
        "name": "crypto",
        "type": {
          "name": "Crypto"
        },
        "readonly": true
      },
      {
        "name": "caches",
        "type": {
          "name": "CacheStorage"
        },
        "readonly": true
      },
      {
        "name": "Event",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "Event"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "PromiseRejectionEvent",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "PromiseRejectionEvent"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "FetchEvent",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "FetchEvent"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "ScheduledEvent",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "ScheduledEvent"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "MessageEvent",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "MessageEvent"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "CloseEvent",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "CloseEvent"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "ReadableStreamDefaultReader",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "ReadableStreamDefaultReader"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "ReadableStreamBYOBReader",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "ReadableStreamBYOBReader"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "ReadableStream",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "ReadableStream"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "WritableStream",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "WritableStream"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "WritableStreamDefaultWriter",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "WritableStreamDefaultWriter"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "TransformStream",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "TransformStream"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "Headers",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "Headers"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "Body",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "Body"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "Request",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "Request"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "Response",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "Response"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "WebSocket",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "WebSocket"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "WebSocketPair",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "WebSocketPair"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "AbortController",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "AbortController"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "AbortSignal",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "AbortSignal"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "TextDecoder",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "TextDecoder"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "TextEncoder",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "TextEncoder"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "URL",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "URL"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "URLSearchParams",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "URLSearchParams"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "Blob",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "Blob"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "File",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "File"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "FormData",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "FormData"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "Crypto",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "Crypto"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "SubtleCrypto",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "SubtleCrypto"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "CryptoKey",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "CryptoKey"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "CacheStorage",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "CacheStorage"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "Cache",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "Cache"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "FixedLengthStream",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "FixedLengthStream"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "HTMLRewriter",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "HTMLRewriter"
            }
          ]
        },
        "static": true,
        "readonly": true
      },
      {
        "name": "console",
        "type": {
          "name": "Console"
        },
        "readonly": true
      }
    ],
    "extends": [
      {
        "name": "WorkerGlobalScope"
      }
    ],
    "kind": "class"
  },
  "StreamPipeOptions": {
    "name": "StreamPipeOptions",
    "type": {
      "name": "PipeToOptions"
    },
    "kind": "typedef"
  },
  "StreamQueuingStrategy": {
    "name": "StreamQueuingStrategy",
    "members": [
      {
        "name": "highWaterMark",
        "type": {
          "name": "integer",
          "optional": true
        }
      },
      {
        "name": "size",
        "type": {
          "params": [
            {
              "name": "chunk",
              "type": {
                "name": "ArrayBuffer"
              }
            }
          ],
          "returns": {
            "name": "number"
          }
        }
      }
    ],
    "kind": "struct"
  },
  "SubtleCrypto": {
    "name": "SubtleCrypto",
    "members": [
      {
        "name": "encrypt",
        "type": {
          "params": [
            {
              "name": "algorithm",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "SubtleCryptoEncryptAlgorithm"
                  }
                ]
              }
            },
            {
              "name": "key",
              "type": {
                "name": "CryptoKey"
              }
            },
            {
              "name": "plainText",
              "type": {
                "name": "ArrayBuffer"
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "ArrayBuffer"
              }
            ]
          }
        }
      },
      {
        "name": "decrypt",
        "type": {
          "params": [
            {
              "name": "algorithm",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "SubtleCryptoEncryptAlgorithm"
                  }
                ]
              }
            },
            {
              "name": "key",
              "type": {
                "name": "CryptoKey"
              }
            },
            {
              "name": "cipherText",
              "type": {
                "name": "ArrayBuffer"
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "ArrayBuffer"
              }
            ]
          }
        }
      },
      {
        "name": "sign",
        "type": {
          "params": [
            {
              "name": "algorithm",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "SubtleCryptoSignAlgorithm"
                  }
                ]
              }
            },
            {
              "name": "key",
              "type": {
                "name": "CryptoKey"
              }
            },
            {
              "name": "data",
              "type": {
                "name": "ArrayBuffer"
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "ArrayBuffer"
              }
            ]
          }
        }
      },
      {
        "name": "verify",
        "type": {
          "params": [
            {
              "name": "algorithm",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "SubtleCryptoSignAlgorithm"
                  }
                ]
              }
            },
            {
              "name": "key",
              "type": {
                "name": "CryptoKey"
              }
            },
            {
              "name": "signature",
              "type": {
                "name": "ArrayBuffer"
              }
            },
            {
              "name": "data",
              "type": {
                "name": "ArrayBuffer"
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "boolean"
              }
            ]
          }
        }
      },
      {
        "name": "digest",
        "type": {
          "params": [
            {
              "name": "algorithm",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "SubtleCryptoHashAlgorithm"
                  }
                ]
              }
            },
            {
              "name": "data",
              "type": {
                "name": "ArrayBuffer"
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "ArrayBuffer"
              }
            ]
          }
        }
      },
      {
        "name": "generateKey",
        "type": {
          "params": [
            {
              "name": "algorithm",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "SubtleCryptoGenerateKeyAlgorithm"
                  }
                ]
              }
            },
            {
              "name": "extractable",
              "type": {
                "name": "boolean"
              }
            },
            {
              "name": "keyUsages",
              "type": {
                "name": "[]",
                "args": [
                  {
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "|",
                "args": [
                  {
                    "name": "CryptoKey"
                  },
                  {
                    "name": "CryptoKeyPair"
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "deriveKey",
        "type": {
          "params": [
            {
              "name": "algorithm",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "SubtleCryptoDeriveKeyAlgorithm"
                  }
                ]
              }
            },
            {
              "name": "baseKey",
              "type": {
                "name": "CryptoKey"
              }
            },
            {
              "name": "derivedKeyAlgorithm",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "SubtleCryptoImportKeyAlgorithm"
                  }
                ]
              }
            },
            {
              "name": "extractable",
              "type": {
                "name": "boolean"
              }
            },
            {
              "name": "keyUsages",
              "type": {
                "name": "[]",
                "args": [
                  {
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "CryptoKey"
              }
            ]
          }
        }
      },
      {
        "name": "deriveBits",
        "type": {
          "params": [
            {
              "name": "algorithm",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "SubtleCryptoDeriveKeyAlgorithm"
                  }
                ]
              }
            },
            {
              "name": "baseKey",
              "type": {
                "name": "CryptoKey"
              }
            },
            {
              "name": "length",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "integer"
                  },
                  {
                    "name": "null"
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "ArrayBuffer"
              }
            ]
          }
        }
      },
      {
        "name": "importKey",
        "type": {
          "params": [
            {
              "name": "format",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "keyData",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "ArrayBuffer"
                  },
                  {
                    "name": "SubtleCryptoJsonWebKey"
                  }
                ]
              }
            },
            {
              "name": "algorithm",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "SubtleCryptoImportKeyAlgorithm"
                  }
                ]
              }
            },
            {
              "name": "extractable",
              "type": {
                "name": "boolean"
              }
            },
            {
              "name": "keyUsages",
              "type": {
                "name": "[]",
                "args": [
                  {
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "CryptoKey"
              }
            ]
          }
        }
      },
      {
        "name": "exportKey",
        "type": {
          "params": [
            {
              "name": "format",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "key",
              "type": {
                "name": "CryptoKey"
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "|",
                "args": [
                  {
                    "name": "ArrayBuffer"
                  },
                  {
                    "name": "SubtleCryptoJsonWebKey"
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "wrapKey",
        "type": {
          "params": [
            {
              "name": "format",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "key",
              "type": {
                "name": "CryptoKey"
              }
            },
            {
              "name": "wrappingKey",
              "type": {
                "name": "CryptoKey"
              }
            },
            {
              "name": "wrapAlgorithm",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "SubtleCryptoEncryptAlgorithm"
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "ArrayBuffer"
              }
            ]
          }
        }
      },
      {
        "name": "unwrapKey",
        "type": {
          "params": [
            {
              "name": "format",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "wrappedKey",
              "type": {
                "name": "ArrayBuffer"
              }
            },
            {
              "name": "unwrappingKey",
              "type": {
                "name": "CryptoKey"
              }
            },
            {
              "name": "unwrapAlgorithm",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "SubtleCryptoEncryptAlgorithm"
                  }
                ]
              }
            },
            {
              "name": "unwrappedKeyAlgorithm",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "SubtleCryptoImportKeyAlgorithm"
                  }
                ]
              }
            },
            {
              "name": "extractable",
              "type": {
                "name": "boolean"
              }
            },
            {
              "name": "keyUsages",
              "type": {
                "name": "[]",
                "args": [
                  {
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "CryptoKey"
              }
            ]
          }
        }
      }
    ],
    "kind": "class"
  },
  "SubtleCryptoDeriveKeyAlgorithm": {
    "name": "SubtleCryptoDeriveKeyAlgorithm",
    "members": [
      {
        "name": "name",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "salt",
        "type": {
          "name": "ArrayBuffer",
          "optional": true
        }
      },
      {
        "name": "iterations",
        "type": {
          "name": "integer",
          "optional": true
        }
      },
      {
        "name": "hash",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "string"
            },
            {
              "name": "SubtleCryptoHashAlgorithm"
            }
          ],
          "optional": true
        }
      },
      {
        "name": "public",
        "type": {
          "name": "CryptoKey",
          "optional": true
        }
      },
      {
        "name": "info",
        "type": {
          "name": "ArrayBuffer",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "SubtleCryptoEncryptAlgorithm": {
    "name": "SubtleCryptoEncryptAlgorithm",
    "members": [
      {
        "name": "name",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "iv",
        "type": {
          "name": "ArrayBuffer",
          "optional": true
        }
      },
      {
        "name": "additionalData",
        "type": {
          "name": "ArrayBuffer",
          "optional": true
        }
      },
      {
        "name": "tagLength",
        "type": {
          "name": "integer",
          "optional": true
        }
      },
      {
        "name": "counter",
        "type": {
          "name": "ArrayBuffer",
          "optional": true
        }
      },
      {
        "name": "length",
        "type": {
          "name": "integer",
          "optional": true
        }
      },
      {
        "name": "label",
        "type": {
          "name": "ArrayBuffer",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "SubtleCryptoGenerateKeyAlgorithm": {
    "name": "SubtleCryptoGenerateKeyAlgorithm",
    "members": [
      {
        "name": "name",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "hash",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "string"
            },
            {
              "name": "SubtleCryptoHashAlgorithm"
            }
          ],
          "optional": true
        }
      },
      {
        "name": "modulusLength",
        "type": {
          "name": "integer",
          "optional": true
        }
      },
      {
        "name": "publicExponent",
        "type": {
          "name": "ArrayBuffer",
          "optional": true
        }
      },
      {
        "name": "length",
        "type": {
          "name": "integer",
          "optional": true
        }
      },
      {
        "name": "namedCurve",
        "type": {
          "name": "string",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "SubtleCryptoHashAlgorithm": {
    "name": "SubtleCryptoHashAlgorithm",
    "members": [
      {
        "name": "name",
        "type": {
          "name": "string"
        }
      }
    ],
    "kind": "struct"
  },
  "SubtleCryptoImportKeyAlgorithm": {
    "name": "SubtleCryptoImportKeyAlgorithm",
    "members": [
      {
        "name": "name",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "hash",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "string"
            },
            {
              "name": "SubtleCryptoHashAlgorithm"
            }
          ],
          "optional": true
        }
      },
      {
        "name": "length",
        "type": {
          "name": "integer",
          "optional": true
        }
      },
      {
        "name": "namedCurve",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "compressed",
        "type": {
          "name": "boolean",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "SubtleCryptoJsonWebKey": {
    "name": "SubtleCryptoJsonWebKey",
    "members": [
      {
        "name": "kty",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "use",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "key_ops",
        "type": {
          "name": "[]",
          "args": [
            {
              "name": "string"
            }
          ],
          "optional": true
        }
      },
      {
        "name": "alg",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "ext",
        "type": {
          "name": "boolean",
          "optional": true
        }
      },
      {
        "name": "crv",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "x",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "y",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "d",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "n",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "e",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "p",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "q",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "dp",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "dq",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "qi",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "oth",
        "type": {
          "name": "[]",
          "args": [
            {
              "name": "SubtleCryptoJsonWebKeyRsaOtherPrimesInfo"
            }
          ],
          "optional": true
        }
      },
      {
        "name": "k",
        "type": {
          "name": "string",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "SubtleCryptoJsonWebKeyRsaOtherPrimesInfo": {
    "name": "SubtleCryptoJsonWebKeyRsaOtherPrimesInfo",
    "members": [
      {
        "name": "r",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "d",
        "type": {
          "name": "string",
          "optional": true
        }
      },
      {
        "name": "t",
        "type": {
          "name": "string",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "SubtleCryptoSignAlgorithm": {
    "name": "SubtleCryptoSignAlgorithm",
    "members": [
      {
        "name": "name",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "hash",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "string"
            },
            {
              "name": "SubtleCryptoHashAlgorithm"
            }
          ],
          "optional": true
        }
      },
      {
        "name": "dataLength",
        "type": {
          "name": "integer",
          "optional": true
        }
      },
      {
        "name": "saltLength",
        "type": {
          "name": "integer",
          "optional": true
        }
      }
    ],
    "kind": "struct"
  },
  "Text": {
    "name": "Text",
    "members": [
      {
        "name": "text",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "lastInTextNode",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "removed",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "before",
        "type": {
          "params": [
            {
              "name": "content",
              "type": {
                "name": "Content"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "ContentOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Text"
          }
        }
      },
      {
        "name": "after",
        "type": {
          "params": [
            {
              "name": "content",
              "type": {
                "name": "Content"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "ContentOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Text"
          }
        }
      },
      {
        "name": "replace",
        "type": {
          "params": [
            {
              "name": "content",
              "type": {
                "name": "Content"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "ContentOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Text"
          }
        }
      },
      {
        "name": "remove",
        "type": {
          "params": [],
          "returns": {
            "name": "Text"
          }
        }
      }
    ],
    "kind": "class"
  },
  "TextDecoder": {
    "name": "TextDecoder",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "label",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "\"utf-8\""
                  },
                  {
                    "name": "\"utf8\""
                  },
                  {
                    "name": "\"unicode-1-1-utf-8\""
                  }
                ],
                "optional": true
              }
            },
            {
              "name": "options",
              "type": {
                "name": "TextDecoderConstructorOptions",
                "optional": true
              }
            }
          ]
        }
      },
      {
        "name": "decode",
        "type": {
          "params": [
            {
              "name": "input",
              "type": {
                "name": "ArrayBuffer",
                "optional": true
              }
            },
            {
              "name": "options",
              "type": {
                "name": "TextDecoderDecodeOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "string"
          }
        }
      },
      {
        "name": "encoding",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "fatal",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "ignoreBOM",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      }
    ],
    "kind": "class"
  },
  "TextDecoderConstructorOptions": {
    "name": "TextDecoderConstructorOptions",
    "members": [
      {
        "name": "fatal",
        "type": {
          "name": "boolean"
        }
      },
      {
        "name": "ignoreBOM",
        "type": {
          "name": "boolean"
        }
      }
    ],
    "kind": "struct"
  },
  "TextDecoderDecodeOptions": {
    "name": "TextDecoderDecodeOptions",
    "members": [
      {
        "name": "stream",
        "type": {
          "name": "boolean"
        }
      }
    ],
    "kind": "struct"
  },
  "TextEncoder": {
    "name": "TextEncoder",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": []
        }
      },
      {
        "name": "encode",
        "type": {
          "params": [
            {
              "name": "input",
              "type": {
                "name": "string",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "Uint8Array"
          }
        }
      },
      {
        "name": "encodeInto",
        "type": {
          "params": [
            {
              "name": "input",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "buffer",
              "type": {
                "name": "Uint8Array"
              }
            }
          ],
          "returns": {
            "name": "TextEncoderEncodeIntoResult"
          }
        }
      },
      {
        "name": "encoding",
        "type": {
          "name": "string"
        },
        "readonly": true
      }
    ],
    "kind": "class"
  },
  "TextEncoderEncodeIntoResult": {
    "name": "TextEncoderEncodeIntoResult",
    "members": [
      {
        "name": "read",
        "type": {
          "name": "integer"
        }
      },
      {
        "name": "written",
        "type": {
          "name": "integer"
        }
      }
    ],
    "kind": "struct"
  },
  "TransformStream": {
    "name": "TransformStream",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": []
        }
      },
      {
        "name": "readable",
        "type": {
          "name": "ReadableStream"
        },
        "readonly": true
      },
      {
        "name": "writable",
        "type": {
          "name": "WritableStream"
        },
        "readonly": true
      }
    ],
    "kind": "class"
  },
  "URL": {
    "name": "URL",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "url",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "base",
              "type": {
                "name": "string",
                "optional": true
              }
            }
          ]
        }
      },
      {
        "name": "href",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "origin",
        "type": {
          "name": "string"
        },
        "readonly": true
      },
      {
        "name": "protocol",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "username",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "password",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "host",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "hostname",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "port",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "pathname",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "search",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "searchParams",
        "type": {
          "name": "URLSearchParams"
        },
        "readonly": true
      },
      {
        "name": "hash",
        "type": {
          "name": "string"
        }
      },
      {
        "name": "toString",
        "type": {
          "params": [],
          "returns": {
            "name": "string"
          }
        }
      },
      {
        "name": "toJSON",
        "type": {
          "params": [],
          "returns": {
            "name": "string"
          }
        }
      }
    ],
    "kind": "class"
  },
  "URLSearchParams": {
    "name": "URLSearchParams",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "init",
              "type": {
                "name": "URLSearchParamsInit",
                "optional": true
              }
            }
          ]
        }
      },
      {
        "name": "append",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "delete",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "get",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "|",
            "args": [
              {
                "name": "string"
              },
              {
                "name": "null"
              }
            ]
          }
        }
      },
      {
        "name": "getAll",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "[]",
            "args": [
              {
                "name": "string"
              }
            ]
          }
        }
      },
      {
        "name": "has",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "boolean"
          }
        }
      },
      {
        "name": "set",
        "type": {
          "params": [
            {
              "name": "name",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "string"
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "sort",
        "type": {
          "params": [],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "entries",
        "type": {
          "params": [],
          "returns": {
            "name": "IterableIterator",
            "args": [
              {
                "name": "()",
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "name": "string"
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "name": "string"
                    }
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "keys",
        "type": {
          "params": [],
          "returns": {
            "name": "IterableIterator",
            "args": [
              {
                "name": "string"
              }
            ]
          }
        }
      },
      {
        "name": "values",
        "type": {
          "params": [],
          "returns": {
            "name": "IterableIterator",
            "args": [
              {
                "name": "string"
              }
            ]
          }
        }
      },
      {
        "name": "forEach",
        "type": {
          "params": [
            {
              "name": "callback",
              "type": {
                "params": [
                  {
                    "name": "this",
                    "type": {
                      "name": "This"
                    }
                  },
                  {
                    "name": "key",
                    "type": {
                      "name": "string"
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "name": "string"
                    }
                  },
                  {
                    "name": "parent",
                    "type": {
                      "name": "URLSearchParams"
                    }
                  }
                ],
                "returns": {
                  "name": "void"
                }
              }
            },
            {
              "name": "thisArg",
              "type": {
                "name": "This",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        },
        "typeparams": [
          {
            "name": "This",
            "default": {
              "name": "unknown"
            }
          }
        ]
      },
      {
        "name": "[Symbol.iterator]",
        "type": {
          "params": [],
          "returns": {
            "name": "IterableIterator",
            "args": [
              {
                "name": "()",
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "name": "string"
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "name": "string"
                    }
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "name": "toString",
        "type": {
          "params": [],
          "returns": {
            "name": "string"
          }
        }
      }
    ],
    "kind": "class"
  },
  "URLSearchParamsInit": {
    "name": "URLSearchParamsInit",
    "type": {
      "name": "|",
      "args": [
        {
          "name": "URLSearchParams"
        },
        {
          "name": "string"
        },
        {
          "name": "Record",
          "args": [
            {
              "name": "string"
            },
            {
              "name": "string"
            }
          ]
        },
        {
          "name": "[]",
          "args": [
            {
              "name": "()",
              "params": [
                {
                  "name": "key",
                  "type": {
                    "name": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "name": "string"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    "kind": "typedef"
  },
  "URLSearchParamsInitializer": {
    "name": "URLSearchParamsInitializer",
    "type": {
      "name": "URLSearchParamsInit"
    },
    "comment": {
      "text": "Back compat for code migrating to older definitions.\nThis technically isn't part of a standard either way, but the naming\nis more consistent.",
      "deprecated": "Use URLSearchParamsInit instead."
    },
    "kind": "typedef"
  },
  "WebSocket": {
    "name": "WebSocket",
    "members": [
      {
        "name": "accept",
        "type": {
          "params": [],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "send",
        "type": {
          "params": [
            {
              "name": "message",
              "type": {
                "name": "|",
                "args": [
                  {
                    "name": "ArrayBuffer"
                  },
                  {
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      },
      {
        "name": "close",
        "type": {
          "params": [
            {
              "name": "code",
              "type": {
                "name": "integer",
                "optional": true
              }
            },
            {
              "name": "reason",
              "type": {
                "name": "string",
                "optional": true
              }
            }
          ],
          "returns": {
            "name": "void"
          }
        }
      }
    ],
    "extends": [
      {
        "name": "EventTarget",
        "args": [
          {
            "name": "WebSocketEventMap"
          }
        ]
      }
    ],
    "kind": "class"
  },
  "WebSocketEventMap": {
    "name": "WebSocketEventMap",
    "type": {
      "members": [
        {
          "name": "close",
          "type": {
            "name": "CloseEvent"
          }
        },
        {
          "name": "message",
          "type": {
            "name": "MessageEvent"
          }
        }
      ]
    },
    "kind": "typedef"
  },
  "WebSocketPair": {
    "name": "WebSocketPair",
    "type": {
      "members": [
        {
          "name": "new",
          "type": {
            "params": [],
            "returns": {
              "members": [
                {
                  "name": "0",
                  "type": {
                    "name": "WebSocket"
                  }
                },
                {
                  "name": "1",
                  "type": {
                    "name": "WebSocket"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "kind": "variable"
  },
  "WorkerGlobalScope": {
    "name": "WorkerGlobalScope",
    "members": [
      {
        "name": "EventTarget",
        "type": {
          "name": "typeof",
          "args": [
            {
              "name": "EventTarget"
            }
          ]
        },
        "static": true,
        "readonly": true
      }
    ],
    "extends": [
      {
        "name": "EventTarget",
        "args": [
          {
            "name": "WorkerGlobalScopeEventMap"
          }
        ]
      }
    ],
    "kind": "class"
  },
  "WorkerGlobalScopeEventMap": {
    "name": "WorkerGlobalScopeEventMap",
    "type": {
      "members": [
        {
          "name": "fetch",
          "type": {
            "name": "FetchEvent"
          }
        },
        {
          "name": "scheduled",
          "type": {
            "name": "ScheduledEvent"
          }
        },
        {
          "name": "unhandledrejection",
          "type": {
            "name": "PromiseRejectionEvent"
          }
        },
        {
          "name": "rejectionhandled",
          "type": {
            "name": "PromiseRejectionEvent"
          }
        }
      ]
    },
    "kind": "typedef"
  },
  "WritableStream": {
    "name": "WritableStream",
    "members": [
      {
        "name": "locked",
        "type": {
          "name": "boolean"
        },
        "readonly": true
      },
      {
        "name": "abort",
        "type": {
          "params": [
            {
              "name": "reason",
              "type": {
                "name": "any"
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        }
      },
      {
        "name": "close",
        "type": {
          "params": [],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        }
      },
      {
        "name": "getWriter",
        "type": {
          "params": [],
          "returns": {
            "name": "WritableStreamDefaultWriter"
          }
        }
      }
    ],
    "kind": "class"
  },
  "WritableStreamDefaultWriter": {
    "name": "WritableStreamDefaultWriter",
    "members": [
      {
        "name": "constructor",
        "type": {
          "params": [
            {
              "name": "stream",
              "type": {
                "name": "WritableStream"
              }
            }
          ]
        }
      },
      {
        "name": "closed",
        "type": {
          "name": "Promise",
          "args": [
            {
              "name": "void"
            }
          ]
        },
        "readonly": true
      },
      {
        "name": "desiredSize",
        "type": {
          "name": "|",
          "args": [
            {
              "name": "integer"
            },
            {
              "name": "null"
            }
          ]
        },
        "readonly": true
      },
      {
        "name": "abort",
        "type": {
          "params": [
            {
              "name": "reason",
              "type": {
                "name": "any"
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        }
      },
      {
        "name": "close",
        "type": {
          "params": [],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        }
      },
      {
        "name": "write",
        "type": {
          "params": [
            {
              "name": "chunk",
              "type": {
                "name": "any"
              }
            }
          ],
          "returns": {
            "name": "Promise",
            "args": [
              {
                "name": "void"
              }
            ]
          }
        }
      },
      {
        "name": "releaseLock",
        "type": {
          "params": [],
          "returns": {
            "name": "void"
          }
        }
      }
    ],
    "kind": "class"
  },
  "WritableStreamWritableStreamDefaultWriter": {
    "name": "WritableStreamWritableStreamDefaultWriter",
    "type": {
      "name": "WritableStreamDefaultWriter"
    },
    "comment": {
      "text": "Back-compat alias.",
      "deprecated": "Use WritableStreamDefaultWriter"
    },
    "kind": "typedef"
  },
  "addEventListener": {
    "name": "addEventListener",
    "type": {
      "params": [
        {
          "name": "type",
          "type": {
            "name": "Type"
          }
        },
        {
          "name": "handler",
          "type": {
            "name": "EventListenerOrEventListenerObject",
            "args": [
              {
                "name": "WorkerGlobalScopeEventMap",
                "index": {
                  "name": "Type"
                }
              }
            ]
          }
        },
        {
          "name": "options",
          "type": {
            "name": "|",
            "args": [
              {
                "name": "EventTargetAddEventListenerOptions"
              },
              {
                "name": "boolean"
              }
            ],
            "optional": true
          }
        }
      ],
      "returns": {
        "name": "void"
      }
    },
    "typeparams": [
      {
        "name": "Type",
        "constraint": {
          "name": "keyof",
          "args": [
            {
              "name": "WorkerGlobalScopeEventMap"
            }
          ]
        }
      }
    ],
    "kind": "function"
  },
  "atob": {
    "name": "atob",
    "type": {
      "params": [
        {
          "name": "data",
          "type": {
            "name": "string"
          }
        }
      ],
      "returns": {
        "name": "string"
      }
    },
    "kind": "function"
  },
  "btoa": {
    "name": "btoa",
    "type": {
      "params": [
        {
          "name": "data",
          "type": {
            "name": "string"
          }
        }
      ],
      "returns": {
        "name": "string"
      }
    },
    "kind": "function"
  },
  "caches": {
    "name": "caches",
    "type": {
      "name": "CacheStorage"
    },
    "kind": "variable"
  },
  "clearInterval": {
    "name": "clearInterval",
    "type": {
      "params": [
        {
          "name": "timeoutId",
          "type": {
            "name": "|",
            "args": [
              {
                "name": "double"
              },
              {
                "name": "null"
              }
            ]
          }
        }
      ],
      "returns": {
        "name": "void"
      }
    },
    "kind": "function"
  },
  "clearTimeout": {
    "name": "clearTimeout",
    "type": {
      "params": [
        {
          "name": "timeoutId",
          "type": {
            "name": "|",
            "args": [
              {
                "name": "double"
              },
              {
                "name": "null"
              }
            ]
          }
        }
      ],
      "returns": {
        "name": "void"
      }
    },
    "kind": "function"
  },
  "console": {
    "name": "console",
    "type": {
      "name": "Console"
    },
    "kind": "variable"
  },
  "crypto": {
    "name": "crypto",
    "type": {
      "name": "Crypto"
    },
    "kind": "variable"
  },
  "dispatchEvent": {
    "name": "dispatchEvent",
    "type": {
      "params": [
        {
          "name": "event",
          "type": {
            "name": "WorkerGlobalScopeEventMap",
            "index": {
              "name": "keyof",
              "args": [
                {
                  "name": "WorkerGlobalScopeEventMap"
                }
              ]
            }
          }
        }
      ],
      "returns": {
        "name": "boolean"
      }
    },
    "kind": "function"
  },
  "fetch": {
    "name": "fetch",
    "type": {
      "params": [
        {
          "name": "request",
          "type": {
            "name": "|",
            "args": [
              {
                "name": "Request"
              },
              {
                "name": "string"
              }
            ]
          }
        },
        {
          "name": "requestInitr",
          "type": {
            "name": "|",
            "args": [
              {
                "name": "RequestInit"
              },
              {
                "name": "Request"
              }
            ],
            "optional": true
          }
        }
      ],
      "returns": {
        "name": "Promise",
        "args": [
          {
            "name": "Response"
          }
        ]
      }
    },
    "kind": "function"
  },
  "queueMicrotask": {
    "name": "queueMicrotask",
    "type": {
      "params": [
        {
          "name": "task",
          "type": {
            "name": "Function"
          }
        }
      ],
      "returns": {
        "name": "void"
      }
    },
    "kind": "function"
  },
  "removeEventListener": {
    "name": "removeEventListener",
    "type": {
      "params": [
        {
          "name": "type",
          "type": {
            "name": "Type"
          }
        },
        {
          "name": "handler",
          "type": {
            "name": "EventListenerOrEventListenerObject",
            "args": [
              {
                "name": "WorkerGlobalScopeEventMap",
                "index": {
                  "name": "Type"
                }
              }
            ]
          }
        },
        {
          "name": "options",
          "type": {
            "name": "|",
            "args": [
              {
                "name": "EventTargetEventListenerOptions"
              },
              {
                "name": "boolean"
              }
            ],
            "optional": true
          }
        }
      ],
      "returns": {
        "name": "void"
      }
    },
    "typeparams": [
      {
        "name": "Type",
        "constraint": {
          "name": "keyof",
          "args": [
            {
              "name": "WorkerGlobalScopeEventMap"
            }
          ]
        }
      }
    ],
    "kind": "function"
  },
  "self": {
    "name": "self",
    "type": {
      "name": "ServiceWorkerGlobalScope"
    },
    "kind": "variable"
  },
  "setInterval": {
    "name": "setInterval",
    "type": {
      "params": [
        {
          "name": "callback",
          "type": {
            "params": [
              {
                "name": "args",
                "type": {
                  "name": "Args",
                  "variadic": true
                }
              }
            ],
            "returns": {
              "name": "void"
            }
          }
        },
        {
          "name": "msDelay",
          "type": {
            "name": "number",
            "optional": true
          }
        },
        {
          "name": "args",
          "type": {
            "name": "Args",
            "variadic": true
          }
        }
      ],
      "returns": {
        "name": "number"
      }
    },
    "typeparams": [
      {
        "name": "Args",
        "constraint": {
          "name": "[]",
          "args": [
            {
              "name": "any"
            }
          ]
        }
      }
    ],
    "kind": "function"
  },
  "setTimeout": {
    "name": "setTimeout",
    "type": {
      "params": [
        {
          "name": "callback",
          "type": {
            "params": [
              {
                "name": "args",
                "type": {
                  "name": "Args",
                  "variadic": true
                }
              }
            ],
            "returns": {
              "name": "void"
            }
          }
        },
        {
          "name": "msDelay",
          "type": {
            "name": "number",
            "optional": true
          }
        },
        {
          "name": "args",
          "type": {
            "name": "Args",
            "variadic": true
          }
        }
      ],
      "returns": {
        "name": "number"
      }
    },
    "typeparams": [
      {
        "name": "Args",
        "constraint": {
          "name": "[]",
          "args": [
            {
              "name": "any"
            }
          ]
        }
      }
    ],
    "kind": "function"
  }
}